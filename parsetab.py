
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '8E24C025CD29E97158A37B6235FAEBD8'
    
_lr_action_items = {'-':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,44,44,44,-18,44,44,-41,44,-22,-23,44,44,44,44,44,44,-21,44,44,-24,44,]),'|':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,46,46,46,-18,46,46,-41,-33,-22,-23,-28,-27,-34,-29,-26,-25,-21,-30,-32,-24,-31,]),'EQUAL':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,49,49,49,-18,49,49,-41,-33,-22,-23,49,49,-34,-29,-26,-25,-21,-30,-32,-24,-31,]),';':([5,29,31,32,34,35,39,40,41,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,83,],[-4,38,-18,-19,-20,52,-18,61,62,-41,-33,-22,-23,-28,-27,-34,-29,-26,-25,-21,-30,-32,-24,-31,-36,]),'+':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,53,53,53,-18,53,53,-41,53,-22,-23,53,53,53,53,53,53,-21,53,53,-24,53,]),'}':([15,18,23,26,27,38,52,61,62,78,79,],[-10,26,-11,-9,-12,-13,-17,-35,-14,-15,-16,]),'$end':([2,3,14,26,],[0,-1,-2,-9,]),'LESSEQUAL':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,55,55,55,-18,55,55,-41,-33,-22,-23,55,55,-34,-29,-26,-25,-21,-30,-32,-24,-31,]),'GREATEREQUAL':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,57,57,57,-18,57,57,-41,-33,-22,-23,57,57,-34,-29,-26,-25,-21,-30,-32,-24,-31,]),'=':([5,21,24,82,],[-4,30,-4,85,]),'IDENT':([0,1,4,7,9,13,15,18,20,22,23,24,25,26,27,28,30,33,38,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,60,61,62,78,79,84,85,],[4,5,-3,4,5,4,24,24,5,5,-11,-3,5,-9,-12,5,5,5,-13,5,5,5,5,5,5,5,5,5,-17,5,5,5,5,5,5,-35,-14,-15,-16,5,5,]),',':([5,7,8,10,11,16,60,80,81,86,87,],[-4,-5,-6,13,-8,-7,-37,-38,84,-39,-40,]),'IF':([15,18,23,26,27,38,52,61,62,78,79,],[17,17,-11,-9,-12,-13,-17,-35,-14,-15,-16,]),'*':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,45,45,45,-18,45,45,-41,45,45,-23,45,45,45,45,45,45,45,45,45,-24,45,]),'&':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,47,47,47,-18,47,47,-41,-33,-22,-23,47,-27,-34,-29,-26,-25,-21,-30,-32,-24,-31,]),'(':([5,6,17,19,22,25,28,30,33,39,43,44,45,46,47,48,49,50,51,53,54,55,56,57,],[-4,7,25,28,33,33,33,33,33,60,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'>':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,50,50,50,-18,50,50,-41,-33,-22,-23,50,50,-34,-29,-26,-25,-21,-30,-32,-24,-31,]),'WHILE':([15,18,23,26,27,38,52,61,62,78,79,],[19,19,-11,-9,-12,-13,-17,-35,-14,-15,-16,]),'{':([12,58,59,],[15,15,15,]),'<':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,51,51,51,-18,51,51,-41,-33,-22,-23,51,51,-34,-29,-26,-25,-21,-30,-32,-24,-31,]),'DIGITS':([22,25,28,30,33,43,44,45,46,47,48,49,50,51,53,54,55,56,57,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),')':([5,7,8,10,11,16,31,32,34,36,37,42,60,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,80,81,86,87,],[-4,-5,-6,12,-8,-7,-18,-19,-20,58,59,63,-37,-41,-33,-22,-23,-28,-27,-34,-29,-26,-25,-21,-30,-32,-24,-31,-38,83,-39,-40,]),'/':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,56,56,56,-18,56,56,-41,56,56,-23,56,56,56,56,56,56,56,56,56,-24,56,]),'RIGHTSHIFT':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,48,48,48,-18,48,48,-41,-33,-22,-23,48,48,-34,48,48,48,-21,48,48,-24,48,]),'LEFTSHIFT':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,43,43,43,-18,43,43,-41,-33,-22,-23,43,43,-34,43,43,43,-21,43,43,-24,43,]),'RETURN':([15,18,23,26,27,38,52,61,62,78,79,],[22,22,-11,-9,-12,-13,-17,-35,-14,-15,-16,]),'NOTEQUAL':([5,31,32,34,35,36,37,39,41,42,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,],[-4,-18,-19,-20,54,54,54,-18,54,54,-41,-33,-22,-23,54,54,-34,-29,-26,-25,-21,-30,-32,-24,-31,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'constant':([22,25,28,30,33,43,44,45,46,47,48,49,50,51,53,54,55,56,57,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'func_decl':([0,],[3,]),'statements':([15,],[18,]),'func_decl_args':([7,],[10,]),'function_call':([30,],[40,]),'func_arg':([60,84,],[80,86,]),'program':([0,],[2,]),'block':([12,58,59,],[14,78,79,]),'func_decl_arg':([7,13,],[8,16,]),'type':([0,7,13,15,18,],[1,9,9,20,20,]),'ident':([1,9,15,18,20,22,25,28,30,33,43,44,45,46,47,48,49,50,51,53,54,55,56,57,60,84,85,],[6,11,21,21,29,31,31,31,39,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,82,82,87,]),'expression':([22,25,28,30,33,43,44,45,46,47,48,49,50,51,53,54,55,56,57,],[35,36,37,41,42,64,65,66,67,68,69,70,71,72,73,74,75,76,77,]),'func_args':([60,],[81,]),'statement':([15,18,],[23,27,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> func_decl','program',1,'p_program','parser.py',20),
  ('func_decl -> type ident ( func_decl_args ) block','func_decl',6,'p_function_declaration','parser.py',25),
  ('type -> IDENT','type',1,'p_type','parser.py',30),
  ('ident -> IDENT','ident',1,'p_ident','parser.py',35),
  ('func_decl_args -> <empty>','func_decl_args',0,'p_func_decl_args','parser.py',39),
  ('func_decl_args -> func_decl_arg','func_decl_args',1,'p_func_decl_args','parser.py',40),
  ('func_decl_args -> func_decl_args , func_decl_arg','func_decl_args',3,'p_func_decl_args','parser.py',41),
  ('func_decl_arg -> type ident','func_decl_arg',2,'p_func_decl_arg','parser.py',51),
  ('block -> { statements }','block',3,'p_block','parser.py',55),
  ('statements -> <empty>','statements',0,'p_statements','parser.py',59),
  ('statements -> statement','statements',1,'p_statements','parser.py',60),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',61),
  ('statement -> type ident ;','statement',3,'p_declaration','parser.py',71),
  ('statement -> ident = expression ;','statement',4,'p_assignment','parser.py',75),
  ('statement -> IF ( expression ) block','statement',5,'p_if_statement','parser.py',79),
  ('statement -> WHILE ( expression ) block','statement',5,'p_while_statement','parser.py',83),
  ('statement -> RETURN expression ;','statement',3,'p_return_statement','parser.py',87),
  ('expression -> ident','expression',1,'p_ident_expression','parser.py',91),
  ('expression -> constant','expression',1,'p_constant_expression','parser.py',95),
  ('constant -> DIGITS','constant',1,'p_numerical_constant','parser.py',99),
  ('expression -> expression + expression','expression',3,'p_binary_expression','parser.py',103),
  ('expression -> expression - expression','expression',3,'p_binary_expression','parser.py',104),
  ('expression -> expression * expression','expression',3,'p_binary_expression','parser.py',105),
  ('expression -> expression / expression','expression',3,'p_binary_expression','parser.py',106),
  ('expression -> expression < expression','expression',3,'p_binary_expression','parser.py',107),
  ('expression -> expression > expression','expression',3,'p_binary_expression','parser.py',108),
  ('expression -> expression & expression','expression',3,'p_binary_expression','parser.py',109),
  ('expression -> expression | expression','expression',3,'p_binary_expression','parser.py',110),
  ('expression -> expression EQUAL expression','expression',3,'p_binary_expression','parser.py',111),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_binary_expression','parser.py',112),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_binary_expression','parser.py',113),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_binary_expression','parser.py',114),
  ('expression -> expression LEFTSHIFT expression','expression',3,'p_binary_expression','parser.py',115),
  ('expression -> expression RIGHTSHIFT expression','expression',3,'p_binary_expression','parser.py',116),
  ('statement -> ident = function_call ;','statement',4,'p_store_function_result','parser.py',121),
  ('function_call -> ident ( func_args )','function_call',4,'p_function_call','parser.py',125),
  ('func_args -> <empty>','func_args',0,'p_func_args','parser.py',129),
  ('func_args -> func_arg','func_args',1,'p_func_args','parser.py',130),
  ('func_args -> func_args , func_arg','func_args',3,'p_func_args','parser.py',131),
  ('func_arg -> ident = ident','func_arg',3,'p_func_arg','parser.py',141),
  ('expression -> ( expression )','expression',3,'p_parenthesis_expression','parser.py',145),
]
