
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '3CDAA2841C069CA976E26AF0FE0E5AF1'
    
_lr_action_items = {'BOOL':([0,12,19,20,22,26,33,34,48,49,50,54,74,94,95,96,97,98,99,100,101,105,107,],[1,1,1,1,-14,1,-16,1,-18,-17,-13,-23,1,-43,-42,-20,-41,-44,1,-22,-19,-21,1,]),'LEFTSHIFTEQUAL':([25,29,],[-8,40,]),'PLUSEQUAL':([25,29,],[-8,43,]),',':([9,12,15,16,18,21,51,76,78,106,108,],[-8,-9,19,-10,-12,-11,-46,102,-47,-48,-49,]),'MAPSTO':([103,],[107,]),'LEFTSHIFT':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,53,-25,53,53,53,53,53,53,53,53,53,-50,-39,-40,53,-28,53,53,-30,53,53,53,-29,53,-27,53,-45,]),'LONG':([0,12,19,20,22,26,33,34,48,49,50,54,74,94,95,96,97,98,99,100,101,105,107,],[2,2,2,2,-14,2,-16,2,-18,-17,-13,-23,2,-43,-42,-20,-41,-44,2,-22,-19,-21,2,]),'/':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,60,-25,60,60,60,60,60,60,60,60,60,-50,60,60,60,60,60,60,-30,60,60,60,-29,60,60,60,-45,]),']':([13,],[17,]),'DIGITS':([11,27,31,37,40,41,42,43,44,45,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,],[13,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'&':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,63,-25,63,63,63,63,63,63,63,63,63,-50,-39,-40,-38,-28,63,-31,-30,-36,-32,-33,-29,-37,-27,-35,-45,]),'[':([6,],[11,]),'$end':([5,7,22,28,48,50,54,94,95,96,97,98,100,101,105,],[-1,0,-14,-2,-18,-13,-23,-43,-42,-20,-41,-44,-22,-19,-21,]),'IDENT':([0,1,2,3,4,8,12,14,17,19,20,22,24,25,26,27,31,33,34,37,40,41,42,43,44,45,47,48,49,50,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,74,94,95,96,97,98,99,100,101,102,104,105,107,],[3,-6,-5,-3,9,-4,3,9,-7,3,25,-14,9,-3,25,9,9,-16,25,9,9,9,9,9,9,9,9,-18,-17,-13,9,9,-23,9,9,9,9,9,9,9,9,9,9,9,9,9,25,-43,-42,-20,-41,-44,25,-22,-19,9,9,-21,3,]),'BITS':([0,12,19,20,22,26,33,34,48,49,50,54,74,94,95,96,97,98,99,100,101,105,107,],[6,6,6,6,-14,6,-16,6,-18,-17,-13,-23,6,-43,-42,-20,-41,-44,6,-22,-19,-21,6,]),'EQUAL':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,67,-25,67,67,67,67,67,67,67,67,67,-50,-39,-40,-38,-28,67,-31,-30,-36,-32,67,-29,-37,-27,-35,-45,]),'{':([20,74,99,],[26,26,26,]),'}':([22,26,33,34,48,49,50,54,94,95,96,97,98,100,101,105,],[-14,-15,-16,50,-18,-17,-13,-23,-43,-42,-20,-41,-44,-22,-19,-21,]),'(':([9,10,23,27,30,31,36,37,40,41,42,43,44,45,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,],[-8,12,31,37,45,37,51,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'INT':([0,12,19,20,22,26,33,34,48,49,50,54,74,94,95,96,97,98,99,100,101,105,107,],[8,8,8,8,-14,8,-16,8,-18,-17,-13,-23,8,-43,-42,-20,-41,-44,8,-22,-19,-21,8,]),'RIGHTSHIFT':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,55,-25,55,55,55,55,55,55,55,55,55,-50,-39,-40,55,-28,55,55,-30,55,55,55,-29,55,-27,55,-45,]),';':([1,2,3,8,9,17,32,35,36,38,39,68,69,70,71,72,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,48,-26,-24,54,-25,94,95,96,97,98,101,-50,-39,-40,-38,-28,-34,-31,-30,-36,-32,-33,-29,-37,-27,-35,-45,]),'LESSEQUAL':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,56,-25,56,56,56,56,56,56,56,56,56,-50,-39,-40,-38,-28,56,-31,-30,-36,-32,56,-29,-37,-27,-35,-45,]),'-':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,57,-25,57,57,57,57,57,57,57,57,57,-50,57,57,57,-28,57,57,-30,57,57,57,-29,57,-27,57,-45,]),'|':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,58,-25,58,58,58,58,58,58,58,58,58,-50,-39,-40,-38,-28,-34,-31,-30,-36,-32,-33,-29,-37,-27,-35,-45,]),'<':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,59,-25,59,59,59,59,59,59,59,59,59,-50,-39,-40,-38,-28,59,-31,-30,-36,-32,59,-29,-37,-27,-35,-45,]),'WHILE':([20,22,26,33,34,48,49,50,54,74,94,95,96,97,98,99,100,101,105,],[23,-14,23,-16,23,-18,-17,-13,-23,23,-43,-42,-20,-41,-44,23,-22,-19,-21,]),'RIGHTSHIFTEQUAL':([25,29,],[-8,44,]),'NOTEQUAL':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,61,-25,61,61,61,61,61,61,61,61,61,-50,-39,-40,-38,-28,61,-31,-30,-36,-32,61,-29,-37,-27,-35,-45,]),'>':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,62,-25,62,62,62,62,62,62,62,62,62,-50,-39,-40,-38,-28,62,-31,-30,-36,-32,62,-29,-37,-27,-35,-45,]),'=':([9,25,29,32,77,],[-8,-8,42,47,104,]),'RETURN':([20,22,26,33,34,48,49,50,54,74,94,95,96,97,98,99,100,101,105,],[27,-14,27,-16,27,-18,-17,-13,-23,27,-43,-42,-20,-41,-44,27,-22,-19,-21,]),'MINUSEQUAL':([25,29,],[-8,41,]),'*':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,64,-25,64,64,64,64,64,64,64,64,64,-50,64,64,64,64,64,64,-30,64,64,64,-29,64,64,64,-45,]),'GREATEREQUAL':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,65,-25,65,65,65,65,65,65,65,65,65,-50,-39,-40,-38,-28,65,-31,-30,-36,-32,65,-29,-37,-27,-35,-45,]),')':([1,2,3,8,9,12,15,16,17,18,21,35,36,39,46,51,52,73,76,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,106,108,109,],[-6,-5,-3,-4,-8,-9,20,-10,-7,-12,-11,-26,-24,-25,74,-46,79,99,103,-47,-50,-39,-40,-38,-28,-34,-31,-30,-36,-32,-33,-29,-37,-27,-35,-48,-49,-45,]),'+':([1,2,3,8,9,17,35,36,38,39,46,52,68,69,70,71,72,73,75,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,109,],[-6,-5,-3,-4,-8,-7,-26,-24,66,-25,66,66,66,66,66,66,66,66,66,-50,66,66,66,-28,66,66,-30,66,66,66,-29,66,-27,66,-45,]),'IF':([20,22,26,33,34,48,49,50,54,74,94,95,96,97,98,99,100,101,105,],[30,-14,30,-16,30,-18,-17,-13,-23,30,-43,-42,-20,-41,-44,30,-22,-19,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([20,26,34,74,99,],[22,33,49,22,22,]),'expression':([27,31,37,40,41,42,43,44,45,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,],[38,46,52,68,69,70,71,72,73,75,80,81,82,83,84,85,86,87,88,89,90,91,92,93,]),'func_args':([51,],[76,]),'constant':([27,31,37,40,41,42,43,44,45,47,53,55,56,57,58,59,60,61,62,63,64,65,66,67,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'ident':([4,14,20,24,26,27,31,34,37,40,41,42,43,44,45,47,51,53,55,56,57,58,59,60,61,62,63,64,65,66,67,74,99,102,104,],[10,18,29,32,29,36,36,29,36,36,36,36,36,36,36,36,77,36,36,36,36,36,36,36,36,36,36,36,36,36,36,29,29,77,108,]),'statements':([26,],[34,]),'func_decl_args':([12,],[15,]),'type':([0,12,19,20,26,34,74,99,107,],[4,14,14,24,24,24,24,24,109,]),'block':([20,74,99,],[28,100,105,]),'func_decl':([0,],[5,]),'func_arg':([51,102,],[78,106,]),'func_decl_arg':([12,19,],[16,21,]),'program':([0,],[7,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> func_decl','program',1,'p_program','parser.py',20),
  ('func_decl -> type ident ( func_decl_args ) block','func_decl',6,'p_function_declaration','parser.py',25),
  ('type -> IDENT','type',1,'p_type','parser.py',30),
  ('type -> INT','type',1,'p_type','parser.py',31),
  ('type -> LONG','type',1,'p_type','parser.py',32),
  ('type -> BOOL','type',1,'p_type','parser.py',33),
  ('type -> BITS [ DIGITS ]','type',4,'p_type','parser.py',34),
  ('ident -> IDENT','ident',1,'p_ident','parser.py',49),
  ('func_decl_args -> <empty>','func_decl_args',0,'p_func_decl_args','parser.py',53),
  ('func_decl_args -> func_decl_arg','func_decl_args',1,'p_func_decl_args','parser.py',54),
  ('func_decl_args -> func_decl_args , func_decl_arg','func_decl_args',3,'p_func_decl_args','parser.py',55),
  ('func_decl_arg -> type ident','func_decl_arg',2,'p_func_decl_arg','parser.py',65),
  ('block -> { statements }','block',3,'p_block','parser.py',69),
  ('block -> statement','block',1,'p_block','parser.py',70),
  ('statements -> <empty>','statements',0,'p_statements','parser.py',77),
  ('statements -> statement','statements',1,'p_statements','parser.py',78),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',79),
  ('statement -> type ident ;','statement',3,'p_declaration','parser.py',89),
  ('statement -> type ident = expression ;','statement',5,'p_declare_and_assign','parser.py',93),
  ('statement -> ident = expression ;','statement',4,'p_assignment','parser.py',100),
  ('statement -> IF ( expression ) block','statement',5,'p_if_statement','parser.py',104),
  ('statement -> WHILE ( expression ) block','statement',5,'p_while_statement','parser.py',108),
  ('statement -> RETURN expression ;','statement',3,'p_return_statement','parser.py',112),
  ('expression -> ident','expression',1,'p_ident_expression','parser.py',116),
  ('expression -> constant','expression',1,'p_constant_expression','parser.py',120),
  ('constant -> DIGITS','constant',1,'p_numerical_constant','parser.py',124),
  ('expression -> expression + expression','expression',3,'p_binary_expression','parser.py',128),
  ('expression -> expression - expression','expression',3,'p_binary_expression','parser.py',129),
  ('expression -> expression * expression','expression',3,'p_binary_expression','parser.py',130),
  ('expression -> expression / expression','expression',3,'p_binary_expression','parser.py',131),
  ('expression -> expression < expression','expression',3,'p_binary_expression','parser.py',132),
  ('expression -> expression > expression','expression',3,'p_binary_expression','parser.py',133),
  ('expression -> expression & expression','expression',3,'p_binary_expression','parser.py',134),
  ('expression -> expression | expression','expression',3,'p_binary_expression','parser.py',135),
  ('expression -> expression EQUAL expression','expression',3,'p_binary_expression','parser.py',136),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_binary_expression','parser.py',137),
  ('expression -> expression GREATEREQUAL expression','expression',3,'p_binary_expression','parser.py',138),
  ('expression -> expression LESSEQUAL expression','expression',3,'p_binary_expression','parser.py',139),
  ('expression -> expression LEFTSHIFT expression','expression',3,'p_binary_expression','parser.py',140),
  ('expression -> expression RIGHTSHIFT expression','expression',3,'p_binary_expression','parser.py',141),
  ('statement -> ident PLUSEQUAL expression ;','statement',4,'p_op_assignment','parser.py',146),
  ('statement -> ident MINUSEQUAL expression ;','statement',4,'p_op_assignment','parser.py',147),
  ('statement -> ident LEFTSHIFTEQUAL expression ;','statement',4,'p_op_assignment','parser.py',148),
  ('statement -> ident RIGHTSHIFTEQUAL expression ;','statement',4,'p_op_assignment','parser.py',149),
  ('expression -> ident ( func_args ) MAPSTO type','expression',6,'p_function_call','parser.py',159),
  ('func_args -> <empty>','func_args',0,'p_func_args','parser.py',163),
  ('func_args -> func_arg','func_args',1,'p_func_args','parser.py',164),
  ('func_args -> func_args , func_arg','func_args',3,'p_func_args','parser.py',165),
  ('func_arg -> ident = ident','func_arg',3,'p_func_arg','parser.py',175),
  ('expression -> ( expression )','expression',3,'p_parenthesis_expression','parser.py',179),
]
