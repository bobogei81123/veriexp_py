
# parsetab.py
# This file is automatically generated. Do not edit.
_tabversion = '3.8'

_lr_method = 'LALR'

_lr_signature = '6293D18F5F40552BEE93986E9358EF01'
    
_lr_action_items = {'*':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,37,37,37,37,37,-33,-23,37,37,37,37,37,37,-24,37,37,37,37,]),'<':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,38,38,38,38,38,-33,-23,-25,38,-31,-32,-22,-26,-24,-29,38,-30,-21,]),'|':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,39,39,39,39,39,-33,-23,-25,-28,-31,-32,-22,-26,-24,-29,-27,-30,-21,]),'}':([15,18,19,30,31,46,50,69,70,71,],[-10,31,-11,-12,-9,-17,-13,-14,-16,-15,]),'(':([5,6,17,21,22,26,33,34,35,37,38,39,40,41,42,43,44,45,47,48,49,],[7,-4,26,33,34,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,26,]),'>':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,43,43,43,43,43,-33,-23,-25,43,-31,-32,-22,-26,-24,-29,43,-30,-21,]),'=':([23,24,],[35,-4,]),'EQUAL':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,45,45,45,45,45,-33,-23,-25,45,-31,-32,-22,-26,-24,-29,45,-30,-21,]),')':([6,7,9,10,11,14,25,27,28,36,51,52,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-5,13,-6,-8,-7,-20,-18,-19,54,67,68,-33,-23,-25,-28,-31,-32,-22,-26,-24,-29,-27,-30,-21,]),';':([6,25,27,28,29,32,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,46,50,69,-33,-23,-25,-28,-31,-32,-22,-26,-24,-29,-27,-30,-21,]),'$end':([1,2,16,31,],[0,-1,-2,-9,]),'IDENT':([0,3,4,7,8,12,15,17,18,19,20,24,26,30,31,33,34,35,37,38,39,40,41,42,43,44,45,46,47,48,49,50,69,70,71,],[3,-3,6,3,6,3,24,6,24,-11,6,-3,6,-12,-9,6,6,6,6,6,6,6,6,6,6,6,6,-17,6,6,6,-13,-14,-16,-15,]),'NOTEQUAL':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,48,48,48,48,48,-33,-23,-25,48,-31,-32,-22,-26,-24,-29,48,-30,-21,]),',':([6,7,9,10,11,14,],[-4,-5,12,-6,-8,-7,]),'RIGHTSHIFT':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,41,41,41,41,41,-33,-23,41,41,-31,-32,-22,41,-24,41,41,41,-21,]),'-':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,42,42,42,42,42,-33,-23,42,42,42,42,-22,42,-24,42,42,42,-21,]),'/':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,44,44,44,44,44,-33,-23,44,44,44,44,44,44,-24,44,44,44,44,]),'RETURN':([15,18,19,30,31,46,50,69,70,71,],[17,17,-11,-12,-9,-17,-13,-14,-16,-15,]),'IF':([15,18,19,30,31,46,50,69,70,71,],[22,22,-11,-12,-9,-17,-13,-14,-16,-15,]),'WHILE':([15,18,19,30,31,46,50,69,70,71,],[21,21,-11,-12,-9,-17,-13,-14,-16,-15,]),'{':([13,67,68,],[15,15,15,]),'&':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,47,47,47,47,47,-33,-23,-25,47,-31,-32,-22,-26,-24,-29,-27,-30,-21,]),'LEFTSHIFT':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,40,40,40,40,40,-33,-23,40,40,-31,-32,-22,40,-24,40,40,40,-21,]),'DIGITS':([17,26,33,34,35,37,38,39,40,41,42,43,44,45,47,48,49,],[25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,25,]),'+':([6,25,27,28,29,36,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,],[-4,-20,-18,-19,49,49,49,49,49,-33,-23,49,49,49,49,-22,49,-24,49,49,49,-21,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'expression':([17,26,33,34,35,37,38,39,40,41,42,43,44,45,47,48,49,],[29,36,51,52,53,55,56,57,58,59,60,61,62,63,64,65,66,]),'statements':([15,],[18,]),'ident':([4,8,15,17,18,20,26,33,34,35,37,38,39,40,41,42,43,44,45,47,48,49,],[5,11,23,27,23,32,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,27,]),'func_decl':([0,],[2,]),'constant':([17,26,33,34,35,37,38,39,40,41,42,43,44,45,47,48,49,],[28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,28,]),'type':([0,7,12,15,18,],[4,8,8,20,20,]),'statement':([15,18,],[19,30,]),'func_arg_decl':([7,12,],[10,14,]),'func_args':([7,],[9,]),'block':([13,67,68,],[16,70,71,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> func_decl','program',1,'p_program','parser.py',20),
  ('func_decl -> type ident ( func_args ) block','func_decl',6,'p_function_declaration','parser.py',25),
  ('type -> IDENT','type',1,'p_type','parser.py',30),
  ('ident -> IDENT','ident',1,'p_ident','parser.py',35),
  ('func_args -> <empty>','func_args',0,'p_func_args','parser.py',39),
  ('func_args -> func_arg_decl','func_args',1,'p_func_args','parser.py',40),
  ('func_args -> func_args , func_arg_decl','func_args',3,'p_func_args','parser.py',41),
  ('func_arg_decl -> type ident','func_arg_decl',2,'p_func_arg_decl','parser.py',51),
  ('block -> { statements }','block',3,'p_block','parser.py',55),
  ('statements -> <empty>','statements',0,'p_statements','parser.py',59),
  ('statements -> statement','statements',1,'p_statements','parser.py',60),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',61),
  ('statement -> type ident ;','statement',3,'p_declaration','parser.py',71),
  ('statement -> ident = expression ;','statement',4,'p_assignment','parser.py',75),
  ('statement -> IF ( expression ) block','statement',5,'p_if_statement','parser.py',79),
  ('statement -> WHILE ( expression ) block','statement',5,'p_while_statement','parser.py',83),
  ('statement -> RETURN expression ;','statement',3,'p_return_statement','parser.py',87),
  ('expression -> ident','expression',1,'p_ident_expression','parser.py',91),
  ('expression -> constant','expression',1,'p_constant_expression','parser.py',95),
  ('constant -> DIGITS','constant',1,'p_numerical_constant','parser.py',99),
  ('expression -> expression + expression','expression',3,'p_binary_expression','parser.py',103),
  ('expression -> expression - expression','expression',3,'p_binary_expression','parser.py',104),
  ('expression -> expression * expression','expression',3,'p_binary_expression','parser.py',105),
  ('expression -> expression / expression','expression',3,'p_binary_expression','parser.py',106),
  ('expression -> expression < expression','expression',3,'p_binary_expression','parser.py',107),
  ('expression -> expression > expression','expression',3,'p_binary_expression','parser.py',108),
  ('expression -> expression & expression','expression',3,'p_binary_expression','parser.py',109),
  ('expression -> expression | expression','expression',3,'p_binary_expression','parser.py',110),
  ('expression -> expression EQUAL expression','expression',3,'p_binary_expression','parser.py',111),
  ('expression -> expression NOTEQUAL expression','expression',3,'p_binary_expression','parser.py',112),
  ('expression -> expression LEFTSHIFT expression','expression',3,'p_binary_expression','parser.py',113),
  ('expression -> expression RIGHTSHIFT expression','expression',3,'p_binary_expression','parser.py',114),
  ('expression -> ( expression )','expression',3,'p_parenthesis_expression','parser.py',119),
]
