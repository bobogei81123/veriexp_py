Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> func_decl
Rule 2     func_decl -> type ident ( func_decl_args ) block
Rule 3     type -> IDENT
Rule 4     type -> INT
Rule 5     type -> LONG
Rule 6     type -> BOOL
Rule 7     type -> BITS [ DIGITS ]
Rule 8     ident -> IDENT
Rule 9     func_decl_args -> <empty>
Rule 10    func_decl_args -> func_decl_arg
Rule 11    func_decl_args -> func_decl_args , func_decl_arg
Rule 12    func_decl_arg -> type ident
Rule 13    block -> { statements }
Rule 14    block -> statement
Rule 15    statements -> <empty>
Rule 16    statements -> statement
Rule 17    statements -> statements statement
Rule 18    statement -> type ident ;
Rule 19    statement -> type ident = expression ;
Rule 20    statement -> ident = expression ;
Rule 21    statement -> IF ( expression ) block
Rule 22    statement -> WHILE ( expression ) block
Rule 23    statement -> RETURN expression ;
Rule 24    expression -> ident
Rule 25    expression -> constant
Rule 26    constant -> DIGITS
Rule 27    expression -> expression + expression
Rule 28    expression -> expression - expression
Rule 29    expression -> expression * expression
Rule 30    expression -> expression / expression
Rule 31    expression -> expression < expression
Rule 32    expression -> expression > expression
Rule 33    expression -> expression & expression
Rule 34    expression -> expression | expression
Rule 35    expression -> expression EQUAL expression
Rule 36    expression -> expression NOTEQUAL expression
Rule 37    expression -> expression GREATEREQUAL expression
Rule 38    expression -> expression LESSEQUAL expression
Rule 39    expression -> expression LEFTSHIFT expression
Rule 40    expression -> expression RIGHTSHIFT expression
Rule 41    statement -> ident PLUSEQUAL expression ;
Rule 42    statement -> ident MINUSEQUAL expression ;
Rule 43    statement -> ident LEFTSHIFTEQUAL expression ;
Rule 44    statement -> ident RIGHTSHIFTEQUAL expression ;
Rule 45    expression -> ident ( func_args ) MAPSTO type
Rule 46    func_args -> <empty>
Rule 47    func_args -> func_arg
Rule 48    func_args -> func_args , func_arg
Rule 49    func_arg -> ident = ident
Rule 50    expression -> ( expression )

Terminals, with rules where they appear

&                    : 33
(                    : 2 21 22 45 50
)                    : 2 21 22 45 50
*                    : 29
+                    : 27
,                    : 11 48
-                    : 28
/                    : 30
;                    : 18 19 20 23 41 42 43 44
<                    : 31
=                    : 19 20 49
>                    : 32
BITS                 : 7
BOOL                 : 6
DIGITS               : 7 26
EQUAL                : 35
GREATEREQUAL         : 37
IDENT                : 3 8
IF                   : 21
INT                  : 4
LEFTSHIFT            : 39
LEFTSHIFTEQUAL       : 43
LESSEQUAL            : 38
LONG                 : 5
MAPSTO               : 45
MINUSEQUAL           : 42
NOTEQUAL             : 36
PLUSEQUAL            : 41
RETURN               : 23
RIGHTSHIFT           : 40
RIGHTSHIFTEQUAL      : 44
WHILE                : 22
[                    : 7
]                    : 7
error                : 
{                    : 13
|                    : 34
}                    : 13

Nonterminals, with rules where they appear

block                : 2 21 22
constant             : 25
expression           : 19 20 21 22 23 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 42 43 44 50
func_arg             : 47 48
func_args            : 45 48
func_decl            : 1
func_decl_arg        : 10 11
func_decl_args       : 2 11
ident                : 2 12 18 19 20 24 41 42 43 44 45 49 49
program              : 0
statement            : 14 16 17
statements           : 13 17
type                 : 2 12 18 19 45

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . func_decl
    (2) func_decl -> . type ident ( func_decl_args ) block
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    IDENT           shift and go to state 3
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

    type                           shift and go to state 4
    func_decl                      shift and go to state 5
    program                        shift and go to state 7

state 1

    (6) type -> BOOL .

    IDENT           reduce using rule 6 (type -> BOOL .)
    ;               reduce using rule 6 (type -> BOOL .)
    +               reduce using rule 6 (type -> BOOL .)
    -               reduce using rule 6 (type -> BOOL .)
    *               reduce using rule 6 (type -> BOOL .)
    /               reduce using rule 6 (type -> BOOL .)
    <               reduce using rule 6 (type -> BOOL .)
    >               reduce using rule 6 (type -> BOOL .)
    &               reduce using rule 6 (type -> BOOL .)
    |               reduce using rule 6 (type -> BOOL .)
    EQUAL           reduce using rule 6 (type -> BOOL .)
    NOTEQUAL        reduce using rule 6 (type -> BOOL .)
    GREATEREQUAL    reduce using rule 6 (type -> BOOL .)
    LESSEQUAL       reduce using rule 6 (type -> BOOL .)
    LEFTSHIFT       reduce using rule 6 (type -> BOOL .)
    RIGHTSHIFT      reduce using rule 6 (type -> BOOL .)
    )               reduce using rule 6 (type -> BOOL .)


state 2

    (5) type -> LONG .

    IDENT           reduce using rule 5 (type -> LONG .)
    ;               reduce using rule 5 (type -> LONG .)
    +               reduce using rule 5 (type -> LONG .)
    -               reduce using rule 5 (type -> LONG .)
    *               reduce using rule 5 (type -> LONG .)
    /               reduce using rule 5 (type -> LONG .)
    <               reduce using rule 5 (type -> LONG .)
    >               reduce using rule 5 (type -> LONG .)
    &               reduce using rule 5 (type -> LONG .)
    |               reduce using rule 5 (type -> LONG .)
    EQUAL           reduce using rule 5 (type -> LONG .)
    NOTEQUAL        reduce using rule 5 (type -> LONG .)
    GREATEREQUAL    reduce using rule 5 (type -> LONG .)
    LESSEQUAL       reduce using rule 5 (type -> LONG .)
    LEFTSHIFT       reduce using rule 5 (type -> LONG .)
    RIGHTSHIFT      reduce using rule 5 (type -> LONG .)
    )               reduce using rule 5 (type -> LONG .)


state 3

    (3) type -> IDENT .

    IDENT           reduce using rule 3 (type -> IDENT .)
    ;               reduce using rule 3 (type -> IDENT .)
    +               reduce using rule 3 (type -> IDENT .)
    -               reduce using rule 3 (type -> IDENT .)
    *               reduce using rule 3 (type -> IDENT .)
    /               reduce using rule 3 (type -> IDENT .)
    <               reduce using rule 3 (type -> IDENT .)
    >               reduce using rule 3 (type -> IDENT .)
    &               reduce using rule 3 (type -> IDENT .)
    |               reduce using rule 3 (type -> IDENT .)
    EQUAL           reduce using rule 3 (type -> IDENT .)
    NOTEQUAL        reduce using rule 3 (type -> IDENT .)
    GREATEREQUAL    reduce using rule 3 (type -> IDENT .)
    LESSEQUAL       reduce using rule 3 (type -> IDENT .)
    LEFTSHIFT       reduce using rule 3 (type -> IDENT .)
    RIGHTSHIFT      reduce using rule 3 (type -> IDENT .)
    )               reduce using rule 3 (type -> IDENT .)


state 4

    (2) func_decl -> type . ident ( func_decl_args ) block
    (8) ident -> . IDENT

    IDENT           shift and go to state 9

    ident                          shift and go to state 10

state 5

    (1) program -> func_decl .

    $end            reduce using rule 1 (program -> func_decl .)


state 6

    (7) type -> BITS . [ DIGITS ]

    [               shift and go to state 11


state 7

    (0) S' -> program .



state 8

    (4) type -> INT .

    IDENT           reduce using rule 4 (type -> INT .)
    ;               reduce using rule 4 (type -> INT .)
    +               reduce using rule 4 (type -> INT .)
    -               reduce using rule 4 (type -> INT .)
    *               reduce using rule 4 (type -> INT .)
    /               reduce using rule 4 (type -> INT .)
    <               reduce using rule 4 (type -> INT .)
    >               reduce using rule 4 (type -> INT .)
    &               reduce using rule 4 (type -> INT .)
    |               reduce using rule 4 (type -> INT .)
    EQUAL           reduce using rule 4 (type -> INT .)
    NOTEQUAL        reduce using rule 4 (type -> INT .)
    GREATEREQUAL    reduce using rule 4 (type -> INT .)
    LESSEQUAL       reduce using rule 4 (type -> INT .)
    LEFTSHIFT       reduce using rule 4 (type -> INT .)
    RIGHTSHIFT      reduce using rule 4 (type -> INT .)
    )               reduce using rule 4 (type -> INT .)


state 9

    (8) ident -> IDENT .

    (               reduce using rule 8 (ident -> IDENT .)
    +               reduce using rule 8 (ident -> IDENT .)
    -               reduce using rule 8 (ident -> IDENT .)
    *               reduce using rule 8 (ident -> IDENT .)
    /               reduce using rule 8 (ident -> IDENT .)
    <               reduce using rule 8 (ident -> IDENT .)
    >               reduce using rule 8 (ident -> IDENT .)
    &               reduce using rule 8 (ident -> IDENT .)
    |               reduce using rule 8 (ident -> IDENT .)
    EQUAL           reduce using rule 8 (ident -> IDENT .)
    NOTEQUAL        reduce using rule 8 (ident -> IDENT .)
    GREATEREQUAL    reduce using rule 8 (ident -> IDENT .)
    LESSEQUAL       reduce using rule 8 (ident -> IDENT .)
    LEFTSHIFT       reduce using rule 8 (ident -> IDENT .)
    RIGHTSHIFT      reduce using rule 8 (ident -> IDENT .)
    ;               reduce using rule 8 (ident -> IDENT .)
    )               reduce using rule 8 (ident -> IDENT .)
    =               reduce using rule 8 (ident -> IDENT .)
    ,               reduce using rule 8 (ident -> IDENT .)


state 10

    (2) func_decl -> type ident . ( func_decl_args ) block

    (               shift and go to state 12


state 11

    (7) type -> BITS [ . DIGITS ]

    DIGITS          shift and go to state 13


state 12

    (2) func_decl -> type ident ( . func_decl_args ) block
    (9) func_decl_args -> .
    (10) func_decl_args -> . func_decl_arg
    (11) func_decl_args -> . func_decl_args , func_decl_arg
    (12) func_decl_arg -> . type ident
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    )               reduce using rule 9 (func_decl_args -> .)
    ,               reduce using rule 9 (func_decl_args -> .)
    IDENT           shift and go to state 3
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

    func_decl_arg                  shift and go to state 16
    func_decl_args                 shift and go to state 15
    type                           shift and go to state 14

state 13

    (7) type -> BITS [ DIGITS . ]

    ]               shift and go to state 17


state 14

    (12) func_decl_arg -> type . ident
    (8) ident -> . IDENT

    IDENT           shift and go to state 9

    ident                          shift and go to state 18

state 15

    (2) func_decl -> type ident ( func_decl_args . ) block
    (11) func_decl_args -> func_decl_args . , func_decl_arg

    )               shift and go to state 20
    ,               shift and go to state 19


state 16

    (10) func_decl_args -> func_decl_arg .

    )               reduce using rule 10 (func_decl_args -> func_decl_arg .)
    ,               reduce using rule 10 (func_decl_args -> func_decl_arg .)


state 17

    (7) type -> BITS [ DIGITS ] .

    IDENT           reduce using rule 7 (type -> BITS [ DIGITS ] .)
    ;               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    +               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    -               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    *               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    /               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    <               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    >               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    &               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    |               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    EQUAL           reduce using rule 7 (type -> BITS [ DIGITS ] .)
    NOTEQUAL        reduce using rule 7 (type -> BITS [ DIGITS ] .)
    GREATEREQUAL    reduce using rule 7 (type -> BITS [ DIGITS ] .)
    LESSEQUAL       reduce using rule 7 (type -> BITS [ DIGITS ] .)
    LEFTSHIFT       reduce using rule 7 (type -> BITS [ DIGITS ] .)
    RIGHTSHIFT      reduce using rule 7 (type -> BITS [ DIGITS ] .)
    )               reduce using rule 7 (type -> BITS [ DIGITS ] .)


state 18

    (12) func_decl_arg -> type ident .

    )               reduce using rule 12 (func_decl_arg -> type ident .)
    ,               reduce using rule 12 (func_decl_arg -> type ident .)


state 19

    (11) func_decl_args -> func_decl_args , . func_decl_arg
    (12) func_decl_arg -> . type ident
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    IDENT           shift and go to state 3
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

    type                           shift and go to state 14
    func_decl_arg                  shift and go to state 21

state 20

    (2) func_decl -> type ident ( func_decl_args ) . block
    (13) block -> . { statements }
    (14) block -> . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . IF ( expression ) block
    (22) statement -> . WHILE ( expression ) block
    (23) statement -> . RETURN expression ;
    (41) statement -> . ident PLUSEQUAL expression ;
    (42) statement -> . ident MINUSEQUAL expression ;
    (43) statement -> . ident LEFTSHIFTEQUAL expression ;
    (44) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT

    {               shift and go to state 26
    IF              shift and go to state 30
    WHILE           shift and go to state 23
    RETURN          shift and go to state 27
    IDENT           shift and go to state 25
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

    block                          shift and go to state 28
    type                           shift and go to state 24
    ident                          shift and go to state 29
    statement                      shift and go to state 22

state 21

    (11) func_decl_args -> func_decl_args , func_decl_arg .

    )               reduce using rule 11 (func_decl_args -> func_decl_args , func_decl_arg .)
    ,               reduce using rule 11 (func_decl_args -> func_decl_args , func_decl_arg .)


state 22

    (14) block -> statement .

    $end            reduce using rule 14 (block -> statement .)
    }               reduce using rule 14 (block -> statement .)
    IF              reduce using rule 14 (block -> statement .)
    WHILE           reduce using rule 14 (block -> statement .)
    RETURN          reduce using rule 14 (block -> statement .)
    IDENT           reduce using rule 14 (block -> statement .)
    INT             reduce using rule 14 (block -> statement .)
    LONG            reduce using rule 14 (block -> statement .)
    BOOL            reduce using rule 14 (block -> statement .)
    BITS            reduce using rule 14 (block -> statement .)


state 23

    (22) statement -> WHILE . ( expression ) block

    (               shift and go to state 31


state 24

    (18) statement -> type . ident ;
    (19) statement -> type . ident = expression ;
    (8) ident -> . IDENT

    IDENT           shift and go to state 9

    ident                          shift and go to state 32

state 25

    (3) type -> IDENT .
    (8) ident -> IDENT .

    IDENT           reduce using rule 3 (type -> IDENT .)
    =               reduce using rule 8 (ident -> IDENT .)
    PLUSEQUAL       reduce using rule 8 (ident -> IDENT .)
    MINUSEQUAL      reduce using rule 8 (ident -> IDENT .)
    LEFTSHIFTEQUAL  reduce using rule 8 (ident -> IDENT .)
    RIGHTSHIFTEQUAL reduce using rule 8 (ident -> IDENT .)


state 26

    (13) block -> { . statements }
    (15) statements -> .
    (16) statements -> . statement
    (17) statements -> . statements statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . IF ( expression ) block
    (22) statement -> . WHILE ( expression ) block
    (23) statement -> . RETURN expression ;
    (41) statement -> . ident PLUSEQUAL expression ;
    (42) statement -> . ident MINUSEQUAL expression ;
    (43) statement -> . ident LEFTSHIFTEQUAL expression ;
    (44) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for BITS resolved as shift
    }               reduce using rule 15 (statements -> .)
    IF              shift and go to state 30
    WHILE           shift and go to state 23
    RETURN          shift and go to state 27
    IDENT           shift and go to state 25
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

  ! IF              [ reduce using rule 15 (statements -> .) ]
  ! WHILE           [ reduce using rule 15 (statements -> .) ]
  ! RETURN          [ reduce using rule 15 (statements -> .) ]
  ! IDENT           [ reduce using rule 15 (statements -> .) ]
  ! INT             [ reduce using rule 15 (statements -> .) ]
  ! LONG            [ reduce using rule 15 (statements -> .) ]
  ! BOOL            [ reduce using rule 15 (statements -> .) ]
  ! BITS            [ reduce using rule 15 (statements -> .) ]

    ident                          shift and go to state 29
    statements                     shift and go to state 34
    type                           shift and go to state 24
    statement                      shift and go to state 33

state 27

    (23) statement -> RETURN . expression ;
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 38

state 28

    (2) func_decl -> type ident ( func_decl_args ) block .

    $end            reduce using rule 2 (func_decl -> type ident ( func_decl_args ) block .)


state 29

    (20) statement -> ident . = expression ;
    (41) statement -> ident . PLUSEQUAL expression ;
    (42) statement -> ident . MINUSEQUAL expression ;
    (43) statement -> ident . LEFTSHIFTEQUAL expression ;
    (44) statement -> ident . RIGHTSHIFTEQUAL expression ;

    =               shift and go to state 42
    PLUSEQUAL       shift and go to state 43
    MINUSEQUAL      shift and go to state 41
    LEFTSHIFTEQUAL  shift and go to state 40
    RIGHTSHIFTEQUAL shift and go to state 44


state 30

    (21) statement -> IF . ( expression ) block

    (               shift and go to state 45


state 31

    (22) statement -> WHILE ( . expression ) block
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    expression                     shift and go to state 46
    constant                       shift and go to state 39

state 32

    (18) statement -> type ident . ;
    (19) statement -> type ident . = expression ;

    ;               shift and go to state 48
    =               shift and go to state 47


state 33

    (16) statements -> statement .

    }               reduce using rule 16 (statements -> statement .)
    IF              reduce using rule 16 (statements -> statement .)
    WHILE           reduce using rule 16 (statements -> statement .)
    RETURN          reduce using rule 16 (statements -> statement .)
    IDENT           reduce using rule 16 (statements -> statement .)
    INT             reduce using rule 16 (statements -> statement .)
    LONG            reduce using rule 16 (statements -> statement .)
    BOOL            reduce using rule 16 (statements -> statement .)
    BITS            reduce using rule 16 (statements -> statement .)


state 34

    (13) block -> { statements . }
    (17) statements -> statements . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . IF ( expression ) block
    (22) statement -> . WHILE ( expression ) block
    (23) statement -> . RETURN expression ;
    (41) statement -> . ident PLUSEQUAL expression ;
    (42) statement -> . ident MINUSEQUAL expression ;
    (43) statement -> . ident LEFTSHIFTEQUAL expression ;
    (44) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT

    }               shift and go to state 50
    IF              shift and go to state 30
    WHILE           shift and go to state 23
    RETURN          shift and go to state 27
    IDENT           shift and go to state 25
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

    ident                          shift and go to state 29
    type                           shift and go to state 24
    statement                      shift and go to state 49

state 35

    (26) constant -> DIGITS .

    +               reduce using rule 26 (constant -> DIGITS .)
    -               reduce using rule 26 (constant -> DIGITS .)
    *               reduce using rule 26 (constant -> DIGITS .)
    /               reduce using rule 26 (constant -> DIGITS .)
    <               reduce using rule 26 (constant -> DIGITS .)
    >               reduce using rule 26 (constant -> DIGITS .)
    &               reduce using rule 26 (constant -> DIGITS .)
    |               reduce using rule 26 (constant -> DIGITS .)
    EQUAL           reduce using rule 26 (constant -> DIGITS .)
    NOTEQUAL        reduce using rule 26 (constant -> DIGITS .)
    GREATEREQUAL    reduce using rule 26 (constant -> DIGITS .)
    LESSEQUAL       reduce using rule 26 (constant -> DIGITS .)
    LEFTSHIFT       reduce using rule 26 (constant -> DIGITS .)
    RIGHTSHIFT      reduce using rule 26 (constant -> DIGITS .)
    ;               reduce using rule 26 (constant -> DIGITS .)
    )               reduce using rule 26 (constant -> DIGITS .)


state 36

    (24) expression -> ident .
    (45) expression -> ident . ( func_args ) MAPSTO type

    ;               reduce using rule 24 (expression -> ident .)
    +               reduce using rule 24 (expression -> ident .)
    -               reduce using rule 24 (expression -> ident .)
    *               reduce using rule 24 (expression -> ident .)
    /               reduce using rule 24 (expression -> ident .)
    <               reduce using rule 24 (expression -> ident .)
    >               reduce using rule 24 (expression -> ident .)
    &               reduce using rule 24 (expression -> ident .)
    |               reduce using rule 24 (expression -> ident .)
    EQUAL           reduce using rule 24 (expression -> ident .)
    NOTEQUAL        reduce using rule 24 (expression -> ident .)
    GREATEREQUAL    reduce using rule 24 (expression -> ident .)
    LESSEQUAL       reduce using rule 24 (expression -> ident .)
    LEFTSHIFT       reduce using rule 24 (expression -> ident .)
    RIGHTSHIFT      reduce using rule 24 (expression -> ident .)
    )               reduce using rule 24 (expression -> ident .)
    (               shift and go to state 51


state 37

    (50) expression -> ( . expression )
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 52

state 38

    (23) statement -> RETURN expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 54
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 39

    (25) expression -> constant .

    ;               reduce using rule 25 (expression -> constant .)
    +               reduce using rule 25 (expression -> constant .)
    -               reduce using rule 25 (expression -> constant .)
    *               reduce using rule 25 (expression -> constant .)
    /               reduce using rule 25 (expression -> constant .)
    <               reduce using rule 25 (expression -> constant .)
    >               reduce using rule 25 (expression -> constant .)
    &               reduce using rule 25 (expression -> constant .)
    |               reduce using rule 25 (expression -> constant .)
    EQUAL           reduce using rule 25 (expression -> constant .)
    NOTEQUAL        reduce using rule 25 (expression -> constant .)
    GREATEREQUAL    reduce using rule 25 (expression -> constant .)
    LESSEQUAL       reduce using rule 25 (expression -> constant .)
    LEFTSHIFT       reduce using rule 25 (expression -> constant .)
    RIGHTSHIFT      reduce using rule 25 (expression -> constant .)
    )               reduce using rule 25 (expression -> constant .)


state 40

    (43) statement -> ident LEFTSHIFTEQUAL . expression ;
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 68

state 41

    (42) statement -> ident MINUSEQUAL . expression ;
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 69

state 42

    (20) statement -> ident = . expression ;
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 70

state 43

    (41) statement -> ident PLUSEQUAL . expression ;
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 71

state 44

    (44) statement -> ident RIGHTSHIFTEQUAL . expression ;
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 72

state 45

    (21) statement -> IF ( . expression ) block
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    expression                     shift and go to state 73
    constant                       shift and go to state 39

state 46

    (22) statement -> WHILE ( expression . ) block
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 74
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 47

    (19) statement -> type ident = . expression ;
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 75

state 48

    (18) statement -> type ident ; .

    $end            reduce using rule 18 (statement -> type ident ; .)
    }               reduce using rule 18 (statement -> type ident ; .)
    IF              reduce using rule 18 (statement -> type ident ; .)
    WHILE           reduce using rule 18 (statement -> type ident ; .)
    RETURN          reduce using rule 18 (statement -> type ident ; .)
    IDENT           reduce using rule 18 (statement -> type ident ; .)
    INT             reduce using rule 18 (statement -> type ident ; .)
    LONG            reduce using rule 18 (statement -> type ident ; .)
    BOOL            reduce using rule 18 (statement -> type ident ; .)
    BITS            reduce using rule 18 (statement -> type ident ; .)


state 49

    (17) statements -> statements statement .

    }               reduce using rule 17 (statements -> statements statement .)
    IF              reduce using rule 17 (statements -> statements statement .)
    WHILE           reduce using rule 17 (statements -> statements statement .)
    RETURN          reduce using rule 17 (statements -> statements statement .)
    IDENT           reduce using rule 17 (statements -> statements statement .)
    INT             reduce using rule 17 (statements -> statements statement .)
    LONG            reduce using rule 17 (statements -> statements statement .)
    BOOL            reduce using rule 17 (statements -> statements statement .)
    BITS            reduce using rule 17 (statements -> statements statement .)


state 50

    (13) block -> { statements } .

    $end            reduce using rule 13 (block -> { statements } .)
    }               reduce using rule 13 (block -> { statements } .)
    IF              reduce using rule 13 (block -> { statements } .)
    WHILE           reduce using rule 13 (block -> { statements } .)
    RETURN          reduce using rule 13 (block -> { statements } .)
    IDENT           reduce using rule 13 (block -> { statements } .)
    INT             reduce using rule 13 (block -> { statements } .)
    LONG            reduce using rule 13 (block -> { statements } .)
    BOOL            reduce using rule 13 (block -> { statements } .)
    BITS            reduce using rule 13 (block -> { statements } .)


state 51

    (45) expression -> ident ( . func_args ) MAPSTO type
    (46) func_args -> .
    (47) func_args -> . func_arg
    (48) func_args -> . func_args , func_arg
    (49) func_arg -> . ident = ident
    (8) ident -> . IDENT

    )               reduce using rule 46 (func_args -> .)
    ,               reduce using rule 46 (func_args -> .)
    IDENT           shift and go to state 9

    ident                          shift and go to state 77
    func_args                      shift and go to state 76
    func_arg                       shift and go to state 78

state 52

    (50) expression -> ( expression . )
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 79
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 53

    (39) expression -> expression LEFTSHIFT . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 80

state 54

    (23) statement -> RETURN expression ; .

    $end            reduce using rule 23 (statement -> RETURN expression ; .)
    }               reduce using rule 23 (statement -> RETURN expression ; .)
    IF              reduce using rule 23 (statement -> RETURN expression ; .)
    WHILE           reduce using rule 23 (statement -> RETURN expression ; .)
    RETURN          reduce using rule 23 (statement -> RETURN expression ; .)
    IDENT           reduce using rule 23 (statement -> RETURN expression ; .)
    INT             reduce using rule 23 (statement -> RETURN expression ; .)
    LONG            reduce using rule 23 (statement -> RETURN expression ; .)
    BOOL            reduce using rule 23 (statement -> RETURN expression ; .)
    BITS            reduce using rule 23 (statement -> RETURN expression ; .)


state 55

    (40) expression -> expression RIGHTSHIFT . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 81

state 56

    (38) expression -> expression LESSEQUAL . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 82

state 57

    (28) expression -> expression - . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 83

state 58

    (34) expression -> expression | . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 84

state 59

    (31) expression -> expression < . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 85

state 60

    (30) expression -> expression / . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 86

state 61

    (36) expression -> expression NOTEQUAL . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 87

state 62

    (32) expression -> expression > . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 88

state 63

    (33) expression -> expression & . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 89

state 64

    (29) expression -> expression * . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 90

state 65

    (37) expression -> expression GREATEREQUAL . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 91

state 66

    (27) expression -> expression + . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 92

state 67

    (35) expression -> expression EQUAL . expression
    (24) expression -> . ident
    (25) expression -> . constant
    (27) expression -> . expression + expression
    (28) expression -> . expression - expression
    (29) expression -> . expression * expression
    (30) expression -> . expression / expression
    (31) expression -> . expression < expression
    (32) expression -> . expression > expression
    (33) expression -> . expression & expression
    (34) expression -> . expression | expression
    (35) expression -> . expression EQUAL expression
    (36) expression -> . expression NOTEQUAL expression
    (37) expression -> . expression GREATEREQUAL expression
    (38) expression -> . expression LESSEQUAL expression
    (39) expression -> . expression LEFTSHIFT expression
    (40) expression -> . expression RIGHTSHIFT expression
    (45) expression -> . ident ( func_args ) MAPSTO type
    (50) expression -> . ( expression )
    (8) ident -> . IDENT
    (26) constant -> . DIGITS

    (               shift and go to state 37
    IDENT           shift and go to state 9
    DIGITS          shift and go to state 35

    ident                          shift and go to state 36
    constant                       shift and go to state 39
    expression                     shift and go to state 93

state 68

    (43) statement -> ident LEFTSHIFTEQUAL expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 94
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 69

    (42) statement -> ident MINUSEQUAL expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 95
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 70

    (20) statement -> ident = expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 96
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 71

    (41) statement -> ident PLUSEQUAL expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 97
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 72

    (44) statement -> ident RIGHTSHIFTEQUAL expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 98
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 73

    (21) statement -> IF ( expression . ) block
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 99
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 74

    (22) statement -> WHILE ( expression ) . block
    (13) block -> . { statements }
    (14) block -> . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . IF ( expression ) block
    (22) statement -> . WHILE ( expression ) block
    (23) statement -> . RETURN expression ;
    (41) statement -> . ident PLUSEQUAL expression ;
    (42) statement -> . ident MINUSEQUAL expression ;
    (43) statement -> . ident LEFTSHIFTEQUAL expression ;
    (44) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT

    {               shift and go to state 26
    IF              shift and go to state 30
    WHILE           shift and go to state 23
    RETURN          shift and go to state 27
    IDENT           shift and go to state 25
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

    statement                      shift and go to state 22
    type                           shift and go to state 24
    block                          shift and go to state 100
    ident                          shift and go to state 29

state 75

    (19) statement -> type ident = expression . ;
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 101
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    |               shift and go to state 58
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55


state 76

    (45) expression -> ident ( func_args . ) MAPSTO type
    (48) func_args -> func_args . , func_arg

    )               shift and go to state 103
    ,               shift and go to state 102


state 77

    (49) func_arg -> ident . = ident

    =               shift and go to state 104


state 78

    (47) func_args -> func_arg .

    )               reduce using rule 47 (func_args -> func_arg .)
    ,               reduce using rule 47 (func_args -> func_arg .)


state 79

    (50) expression -> ( expression ) .

    ;               reduce using rule 50 (expression -> ( expression ) .)
    +               reduce using rule 50 (expression -> ( expression ) .)
    -               reduce using rule 50 (expression -> ( expression ) .)
    *               reduce using rule 50 (expression -> ( expression ) .)
    /               reduce using rule 50 (expression -> ( expression ) .)
    <               reduce using rule 50 (expression -> ( expression ) .)
    >               reduce using rule 50 (expression -> ( expression ) .)
    &               reduce using rule 50 (expression -> ( expression ) .)
    |               reduce using rule 50 (expression -> ( expression ) .)
    EQUAL           reduce using rule 50 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 50 (expression -> ( expression ) .)
    GREATEREQUAL    reduce using rule 50 (expression -> ( expression ) .)
    LESSEQUAL       reduce using rule 50 (expression -> ( expression ) .)
    LEFTSHIFT       reduce using rule 50 (expression -> ( expression ) .)
    RIGHTSHIFT      reduce using rule 50 (expression -> ( expression ) .)
    )               reduce using rule 50 (expression -> ( expression ) .)


state 80

    (39) expression -> expression LEFTSHIFT expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    <               reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    >               reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    &               reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    |               reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    EQUAL           reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    NOTEQUAL        reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    GREATEREQUAL    reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    LESSEQUAL       reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    LEFTSHIFT       reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    RIGHTSHIFT      reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    )               reduce using rule 39 (expression -> expression LEFTSHIFT expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60

  ! +               [ reduce using rule 39 (expression -> expression LEFTSHIFT expression .) ]
  ! -               [ reduce using rule 39 (expression -> expression LEFTSHIFT expression .) ]
  ! *               [ reduce using rule 39 (expression -> expression LEFTSHIFT expression .) ]
  ! /               [ reduce using rule 39 (expression -> expression LEFTSHIFT expression .) ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]
  ! LEFTSHIFT       [ shift and go to state 53 ]
  ! RIGHTSHIFT      [ shift and go to state 55 ]


state 81

    (40) expression -> expression RIGHTSHIFT expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    <               reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    >               reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    &               reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    |               reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    EQUAL           reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    NOTEQUAL        reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    GREATEREQUAL    reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    LESSEQUAL       reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    LEFTSHIFT       reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    RIGHTSHIFT      reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    )               reduce using rule 40 (expression -> expression RIGHTSHIFT expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60

  ! +               [ reduce using rule 40 (expression -> expression RIGHTSHIFT expression .) ]
  ! -               [ reduce using rule 40 (expression -> expression RIGHTSHIFT expression .) ]
  ! *               [ reduce using rule 40 (expression -> expression RIGHTSHIFT expression .) ]
  ! /               [ reduce using rule 40 (expression -> expression RIGHTSHIFT expression .) ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]
  ! LEFTSHIFT       [ shift and go to state 53 ]
  ! RIGHTSHIFT      [ shift and go to state 55 ]


state 82

    (38) expression -> expression LESSEQUAL expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    <               reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    >               reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    &               reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    |               reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    EQUAL           reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    NOTEQUAL        reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    GREATEREQUAL    reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    LESSEQUAL       reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    )               reduce using rule 38 (expression -> expression LESSEQUAL expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55

  ! +               [ reduce using rule 38 (expression -> expression LESSEQUAL expression .) ]
  ! -               [ reduce using rule 38 (expression -> expression LESSEQUAL expression .) ]
  ! *               [ reduce using rule 38 (expression -> expression LESSEQUAL expression .) ]
  ! /               [ reduce using rule 38 (expression -> expression LESSEQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 38 (expression -> expression LESSEQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 38 (expression -> expression LESSEQUAL expression .) ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]


state 83

    (28) expression -> expression - expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 28 (expression -> expression - expression .)
    +               reduce using rule 28 (expression -> expression - expression .)
    -               reduce using rule 28 (expression -> expression - expression .)
    <               reduce using rule 28 (expression -> expression - expression .)
    >               reduce using rule 28 (expression -> expression - expression .)
    &               reduce using rule 28 (expression -> expression - expression .)
    |               reduce using rule 28 (expression -> expression - expression .)
    EQUAL           reduce using rule 28 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 28 (expression -> expression - expression .)
    GREATEREQUAL    reduce using rule 28 (expression -> expression - expression .)
    LESSEQUAL       reduce using rule 28 (expression -> expression - expression .)
    LEFTSHIFT       reduce using rule 28 (expression -> expression - expression .)
    RIGHTSHIFT      reduce using rule 28 (expression -> expression - expression .)
    )               reduce using rule 28 (expression -> expression - expression .)
    *               shift and go to state 64
    /               shift and go to state 60

  ! *               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 57 ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]
  ! LEFTSHIFT       [ shift and go to state 53 ]
  ! RIGHTSHIFT      [ shift and go to state 55 ]


state 84

    (34) expression -> expression | expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 34 (expression -> expression | expression .)
    |               reduce using rule 34 (expression -> expression | expression .)
    )               reduce using rule 34 (expression -> expression | expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    &               shift and go to state 63
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55

  ! +               [ reduce using rule 34 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 34 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 34 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 34 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 34 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 34 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 34 (expression -> expression | expression .) ]
  ! EQUAL           [ reduce using rule 34 (expression -> expression | expression .) ]
  ! NOTEQUAL        [ reduce using rule 34 (expression -> expression | expression .) ]
  ! GREATEREQUAL    [ reduce using rule 34 (expression -> expression | expression .) ]
  ! LESSEQUAL       [ reduce using rule 34 (expression -> expression | expression .) ]
  ! LEFTSHIFT       [ reduce using rule 34 (expression -> expression | expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 34 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 58 ]


state 85

    (31) expression -> expression < expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 31 (expression -> expression < expression .)
    <               reduce using rule 31 (expression -> expression < expression .)
    >               reduce using rule 31 (expression -> expression < expression .)
    &               reduce using rule 31 (expression -> expression < expression .)
    |               reduce using rule 31 (expression -> expression < expression .)
    EQUAL           reduce using rule 31 (expression -> expression < expression .)
    NOTEQUAL        reduce using rule 31 (expression -> expression < expression .)
    GREATEREQUAL    reduce using rule 31 (expression -> expression < expression .)
    LESSEQUAL       reduce using rule 31 (expression -> expression < expression .)
    )               reduce using rule 31 (expression -> expression < expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55

  ! +               [ reduce using rule 31 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 31 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 31 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 31 (expression -> expression < expression .) ]
  ! LEFTSHIFT       [ reduce using rule 31 (expression -> expression < expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 31 (expression -> expression < expression .) ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]


state 86

    (30) expression -> expression / expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 30 (expression -> expression / expression .)
    +               reduce using rule 30 (expression -> expression / expression .)
    -               reduce using rule 30 (expression -> expression / expression .)
    *               reduce using rule 30 (expression -> expression / expression .)
    /               reduce using rule 30 (expression -> expression / expression .)
    <               reduce using rule 30 (expression -> expression / expression .)
    >               reduce using rule 30 (expression -> expression / expression .)
    &               reduce using rule 30 (expression -> expression / expression .)
    |               reduce using rule 30 (expression -> expression / expression .)
    EQUAL           reduce using rule 30 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 30 (expression -> expression / expression .)
    GREATEREQUAL    reduce using rule 30 (expression -> expression / expression .)
    LESSEQUAL       reduce using rule 30 (expression -> expression / expression .)
    LEFTSHIFT       reduce using rule 30 (expression -> expression / expression .)
    RIGHTSHIFT      reduce using rule 30 (expression -> expression / expression .)
    )               reduce using rule 30 (expression -> expression / expression .)

  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 60 ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]
  ! LEFTSHIFT       [ shift and go to state 53 ]
  ! RIGHTSHIFT      [ shift and go to state 55 ]


state 87

    (36) expression -> expression NOTEQUAL expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    <               reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    >               reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    &               reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    |               reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    EQUAL           reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    GREATEREQUAL    reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    LESSEQUAL       reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    )               reduce using rule 36 (expression -> expression NOTEQUAL expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55

  ! +               [ reduce using rule 36 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 36 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 36 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 36 (expression -> expression NOTEQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 36 (expression -> expression NOTEQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 36 (expression -> expression NOTEQUAL expression .) ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]


state 88

    (32) expression -> expression > expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 32 (expression -> expression > expression .)
    <               reduce using rule 32 (expression -> expression > expression .)
    >               reduce using rule 32 (expression -> expression > expression .)
    &               reduce using rule 32 (expression -> expression > expression .)
    |               reduce using rule 32 (expression -> expression > expression .)
    EQUAL           reduce using rule 32 (expression -> expression > expression .)
    NOTEQUAL        reduce using rule 32 (expression -> expression > expression .)
    GREATEREQUAL    reduce using rule 32 (expression -> expression > expression .)
    LESSEQUAL       reduce using rule 32 (expression -> expression > expression .)
    )               reduce using rule 32 (expression -> expression > expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55

  ! +               [ reduce using rule 32 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 32 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 32 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 32 (expression -> expression > expression .) ]
  ! LEFTSHIFT       [ reduce using rule 32 (expression -> expression > expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 32 (expression -> expression > expression .) ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]


state 89

    (33) expression -> expression & expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 33 (expression -> expression & expression .)
    &               reduce using rule 33 (expression -> expression & expression .)
    |               reduce using rule 33 (expression -> expression & expression .)
    )               reduce using rule 33 (expression -> expression & expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    <               shift and go to state 59
    >               shift and go to state 62
    EQUAL           shift and go to state 67
    NOTEQUAL        shift and go to state 61
    GREATEREQUAL    shift and go to state 65
    LESSEQUAL       shift and go to state 56
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55

  ! +               [ reduce using rule 33 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 33 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 33 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 33 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 33 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 33 (expression -> expression & expression .) ]
  ! EQUAL           [ reduce using rule 33 (expression -> expression & expression .) ]
  ! NOTEQUAL        [ reduce using rule 33 (expression -> expression & expression .) ]
  ! GREATEREQUAL    [ reduce using rule 33 (expression -> expression & expression .) ]
  ! LESSEQUAL       [ reduce using rule 33 (expression -> expression & expression .) ]
  ! LEFTSHIFT       [ reduce using rule 33 (expression -> expression & expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 33 (expression -> expression & expression .) ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]


state 90

    (29) expression -> expression * expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 29 (expression -> expression * expression .)
    +               reduce using rule 29 (expression -> expression * expression .)
    -               reduce using rule 29 (expression -> expression * expression .)
    *               reduce using rule 29 (expression -> expression * expression .)
    /               reduce using rule 29 (expression -> expression * expression .)
    <               reduce using rule 29 (expression -> expression * expression .)
    >               reduce using rule 29 (expression -> expression * expression .)
    &               reduce using rule 29 (expression -> expression * expression .)
    |               reduce using rule 29 (expression -> expression * expression .)
    EQUAL           reduce using rule 29 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 29 (expression -> expression * expression .)
    GREATEREQUAL    reduce using rule 29 (expression -> expression * expression .)
    LESSEQUAL       reduce using rule 29 (expression -> expression * expression .)
    LEFTSHIFT       reduce using rule 29 (expression -> expression * expression .)
    RIGHTSHIFT      reduce using rule 29 (expression -> expression * expression .)
    )               reduce using rule 29 (expression -> expression * expression .)

  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 57 ]
  ! *               [ shift and go to state 64 ]
  ! /               [ shift and go to state 60 ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]
  ! LEFTSHIFT       [ shift and go to state 53 ]
  ! RIGHTSHIFT      [ shift and go to state 55 ]


state 91

    (37) expression -> expression GREATEREQUAL expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    <               reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    >               reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    &               reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    |               reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    EQUAL           reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    NOTEQUAL        reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    GREATEREQUAL    reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    LESSEQUAL       reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    )               reduce using rule 37 (expression -> expression GREATEREQUAL expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55

  ! +               [ reduce using rule 37 (expression -> expression GREATEREQUAL expression .) ]
  ! -               [ reduce using rule 37 (expression -> expression GREATEREQUAL expression .) ]
  ! *               [ reduce using rule 37 (expression -> expression GREATEREQUAL expression .) ]
  ! /               [ reduce using rule 37 (expression -> expression GREATEREQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 37 (expression -> expression GREATEREQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 37 (expression -> expression GREATEREQUAL expression .) ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]


state 92

    (27) expression -> expression + expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 27 (expression -> expression + expression .)
    +               reduce using rule 27 (expression -> expression + expression .)
    -               reduce using rule 27 (expression -> expression + expression .)
    <               reduce using rule 27 (expression -> expression + expression .)
    >               reduce using rule 27 (expression -> expression + expression .)
    &               reduce using rule 27 (expression -> expression + expression .)
    |               reduce using rule 27 (expression -> expression + expression .)
    EQUAL           reduce using rule 27 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 27 (expression -> expression + expression .)
    GREATEREQUAL    reduce using rule 27 (expression -> expression + expression .)
    LESSEQUAL       reduce using rule 27 (expression -> expression + expression .)
    LEFTSHIFT       reduce using rule 27 (expression -> expression + expression .)
    RIGHTSHIFT      reduce using rule 27 (expression -> expression + expression .)
    )               reduce using rule 27 (expression -> expression + expression .)
    *               shift and go to state 64
    /               shift and go to state 60

  ! *               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 66 ]
  ! -               [ shift and go to state 57 ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]
  ! LEFTSHIFT       [ shift and go to state 53 ]
  ! RIGHTSHIFT      [ shift and go to state 55 ]


state 93

    (35) expression -> expression EQUAL expression .
    (27) expression -> expression . + expression
    (28) expression -> expression . - expression
    (29) expression -> expression . * expression
    (30) expression -> expression . / expression
    (31) expression -> expression . < expression
    (32) expression -> expression . > expression
    (33) expression -> expression . & expression
    (34) expression -> expression . | expression
    (35) expression -> expression . EQUAL expression
    (36) expression -> expression . NOTEQUAL expression
    (37) expression -> expression . GREATEREQUAL expression
    (38) expression -> expression . LESSEQUAL expression
    (39) expression -> expression . LEFTSHIFT expression
    (40) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 35 (expression -> expression EQUAL expression .)
    <               reduce using rule 35 (expression -> expression EQUAL expression .)
    >               reduce using rule 35 (expression -> expression EQUAL expression .)
    &               reduce using rule 35 (expression -> expression EQUAL expression .)
    |               reduce using rule 35 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 35 (expression -> expression EQUAL expression .)
    NOTEQUAL        reduce using rule 35 (expression -> expression EQUAL expression .)
    GREATEREQUAL    reduce using rule 35 (expression -> expression EQUAL expression .)
    LESSEQUAL       reduce using rule 35 (expression -> expression EQUAL expression .)
    )               reduce using rule 35 (expression -> expression EQUAL expression .)
    +               shift and go to state 66
    -               shift and go to state 57
    *               shift and go to state 64
    /               shift and go to state 60
    LEFTSHIFT       shift and go to state 53
    RIGHTSHIFT      shift and go to state 55

  ! +               [ reduce using rule 35 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 35 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 35 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 35 (expression -> expression EQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 35 (expression -> expression EQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 35 (expression -> expression EQUAL expression .) ]
  ! <               [ shift and go to state 59 ]
  ! >               [ shift and go to state 62 ]
  ! &               [ shift and go to state 63 ]
  ! |               [ shift and go to state 58 ]
  ! EQUAL           [ shift and go to state 67 ]
  ! NOTEQUAL        [ shift and go to state 61 ]
  ! GREATEREQUAL    [ shift and go to state 65 ]
  ! LESSEQUAL       [ shift and go to state 56 ]


state 94

    (43) statement -> ident LEFTSHIFTEQUAL expression ; .

    $end            reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    }               reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    IF              reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    WHILE           reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    RETURN          reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    IDENT           reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    INT             reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    LONG            reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    BOOL            reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    BITS            reduce using rule 43 (statement -> ident LEFTSHIFTEQUAL expression ; .)


state 95

    (42) statement -> ident MINUSEQUAL expression ; .

    $end            reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    }               reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    IF              reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    WHILE           reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    RETURN          reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    IDENT           reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    INT             reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    LONG            reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    BOOL            reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)
    BITS            reduce using rule 42 (statement -> ident MINUSEQUAL expression ; .)


state 96

    (20) statement -> ident = expression ; .

    $end            reduce using rule 20 (statement -> ident = expression ; .)
    }               reduce using rule 20 (statement -> ident = expression ; .)
    IF              reduce using rule 20 (statement -> ident = expression ; .)
    WHILE           reduce using rule 20 (statement -> ident = expression ; .)
    RETURN          reduce using rule 20 (statement -> ident = expression ; .)
    IDENT           reduce using rule 20 (statement -> ident = expression ; .)
    INT             reduce using rule 20 (statement -> ident = expression ; .)
    LONG            reduce using rule 20 (statement -> ident = expression ; .)
    BOOL            reduce using rule 20 (statement -> ident = expression ; .)
    BITS            reduce using rule 20 (statement -> ident = expression ; .)


state 97

    (41) statement -> ident PLUSEQUAL expression ; .

    $end            reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    }               reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    IF              reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    WHILE           reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    RETURN          reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    IDENT           reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    INT             reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    LONG            reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    BOOL            reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)
    BITS            reduce using rule 41 (statement -> ident PLUSEQUAL expression ; .)


state 98

    (44) statement -> ident RIGHTSHIFTEQUAL expression ; .

    $end            reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    }               reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    IF              reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    WHILE           reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    RETURN          reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    IDENT           reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    INT             reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    LONG            reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    BOOL            reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    BITS            reduce using rule 44 (statement -> ident RIGHTSHIFTEQUAL expression ; .)


state 99

    (21) statement -> IF ( expression ) . block
    (13) block -> . { statements }
    (14) block -> . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . IF ( expression ) block
    (22) statement -> . WHILE ( expression ) block
    (23) statement -> . RETURN expression ;
    (41) statement -> . ident PLUSEQUAL expression ;
    (42) statement -> . ident MINUSEQUAL expression ;
    (43) statement -> . ident LEFTSHIFTEQUAL expression ;
    (44) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT

    {               shift and go to state 26
    IF              shift and go to state 30
    WHILE           shift and go to state 23
    RETURN          shift and go to state 27
    IDENT           shift and go to state 25
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

    statement                      shift and go to state 22
    type                           shift and go to state 24
    block                          shift and go to state 105
    ident                          shift and go to state 29

state 100

    (22) statement -> WHILE ( expression ) block .

    $end            reduce using rule 22 (statement -> WHILE ( expression ) block .)
    }               reduce using rule 22 (statement -> WHILE ( expression ) block .)
    IF              reduce using rule 22 (statement -> WHILE ( expression ) block .)
    WHILE           reduce using rule 22 (statement -> WHILE ( expression ) block .)
    RETURN          reduce using rule 22 (statement -> WHILE ( expression ) block .)
    IDENT           reduce using rule 22 (statement -> WHILE ( expression ) block .)
    INT             reduce using rule 22 (statement -> WHILE ( expression ) block .)
    LONG            reduce using rule 22 (statement -> WHILE ( expression ) block .)
    BOOL            reduce using rule 22 (statement -> WHILE ( expression ) block .)
    BITS            reduce using rule 22 (statement -> WHILE ( expression ) block .)


state 101

    (19) statement -> type ident = expression ; .

    $end            reduce using rule 19 (statement -> type ident = expression ; .)
    }               reduce using rule 19 (statement -> type ident = expression ; .)
    IF              reduce using rule 19 (statement -> type ident = expression ; .)
    WHILE           reduce using rule 19 (statement -> type ident = expression ; .)
    RETURN          reduce using rule 19 (statement -> type ident = expression ; .)
    IDENT           reduce using rule 19 (statement -> type ident = expression ; .)
    INT             reduce using rule 19 (statement -> type ident = expression ; .)
    LONG            reduce using rule 19 (statement -> type ident = expression ; .)
    BOOL            reduce using rule 19 (statement -> type ident = expression ; .)
    BITS            reduce using rule 19 (statement -> type ident = expression ; .)


state 102

    (48) func_args -> func_args , . func_arg
    (49) func_arg -> . ident = ident
    (8) ident -> . IDENT

    IDENT           shift and go to state 9

    ident                          shift and go to state 77
    func_arg                       shift and go to state 106

state 103

    (45) expression -> ident ( func_args ) . MAPSTO type

    MAPSTO          shift and go to state 107


state 104

    (49) func_arg -> ident = . ident
    (8) ident -> . IDENT

    IDENT           shift and go to state 9

    ident                          shift and go to state 108

state 105

    (21) statement -> IF ( expression ) block .

    $end            reduce using rule 21 (statement -> IF ( expression ) block .)
    }               reduce using rule 21 (statement -> IF ( expression ) block .)
    IF              reduce using rule 21 (statement -> IF ( expression ) block .)
    WHILE           reduce using rule 21 (statement -> IF ( expression ) block .)
    RETURN          reduce using rule 21 (statement -> IF ( expression ) block .)
    IDENT           reduce using rule 21 (statement -> IF ( expression ) block .)
    INT             reduce using rule 21 (statement -> IF ( expression ) block .)
    LONG            reduce using rule 21 (statement -> IF ( expression ) block .)
    BOOL            reduce using rule 21 (statement -> IF ( expression ) block .)
    BITS            reduce using rule 21 (statement -> IF ( expression ) block .)


state 106

    (48) func_args -> func_args , func_arg .

    )               reduce using rule 48 (func_args -> func_args , func_arg .)
    ,               reduce using rule 48 (func_args -> func_args , func_arg .)


state 107

    (45) expression -> ident ( func_args ) MAPSTO . type
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    IDENT           shift and go to state 3
    INT             shift and go to state 8
    LONG            shift and go to state 2
    BOOL            shift and go to state 1
    BITS            shift and go to state 6

    type                           shift and go to state 109

state 108

    (49) func_arg -> ident = ident .

    )               reduce using rule 49 (func_arg -> ident = ident .)
    ,               reduce using rule 49 (func_arg -> ident = ident .)


state 109

    (45) expression -> ident ( func_args ) MAPSTO type .

    ;               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    +               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    -               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    *               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    /               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    <               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    >               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    &               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    |               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    EQUAL           reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    NOTEQUAL        reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    GREATEREQUAL    reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    LESSEQUAL       reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    LEFTSHIFT       reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    RIGHTSHIFT      reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)
    )               reduce using rule 45 (expression -> ident ( func_args ) MAPSTO type .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 26 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 26 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 26 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 26 resolved as shift
WARNING: shift/reduce conflict for INT in state 26 resolved as shift
WARNING: shift/reduce conflict for LONG in state 26 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 26 resolved as shift
WARNING: shift/reduce conflict for BITS in state 26 resolved as shift
