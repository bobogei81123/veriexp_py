Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> func_decl
Rule 2     func_decl -> type ident ( func_decl_args ) block
Rule 3     type -> IDENT
Rule 4     type -> INT
Rule 5     type -> LONG
Rule 6     type -> BOOL
Rule 7     type -> BITS [ DIGITS ]
Rule 8     ident -> IDENT
Rule 9     func_decl_args -> <empty>
Rule 10    func_decl_args -> func_decl_arg
Rule 11    func_decl_args -> func_decl_args , func_decl_arg
Rule 12    func_decl_arg -> type ident
Rule 13    block -> { statements }
Rule 14    block -> statement
Rule 15    statements -> <empty>
Rule 16    statements -> statement
Rule 17    statements -> statements statement
Rule 18    statement -> type ident ;
Rule 19    statement -> type ident = expression ;
Rule 20    statement -> ident = expression ;
Rule 21    statement -> ident_list = expression_list ;
Rule 22    ident_list -> ident
Rule 23    ident_list -> ident_list , ident
Rule 24    expression_list -> expression
Rule 25    expression_list -> expression_list , expression
Rule 26    statement -> IF ( expression ) block
Rule 27    statement -> IF ( expression ) block ELSE block
Rule 28    statement -> WHILE ( expression ) block
Rule 29    statement -> RETURN expression ;
Rule 30    expression -> ident
Rule 31    expression -> constant
Rule 32    constant -> DIGITS
Rule 33    expression -> ! expression
Rule 34    expression -> expression + expression
Rule 35    expression -> expression - expression
Rule 36    expression -> expression * expression
Rule 37    expression -> expression / expression
Rule 38    expression -> expression < expression
Rule 39    expression -> expression > expression
Rule 40    expression -> expression & expression
Rule 41    expression -> expression | expression
Rule 42    expression -> expression OPAND expression
Rule 43    expression -> expression OPOR expression
Rule 44    expression -> expression EQUAL expression
Rule 45    expression -> expression NOTEQUAL expression
Rule 46    expression -> expression GREATEREQUAL expression
Rule 47    expression -> expression LESSEQUAL expression
Rule 48    expression -> expression LEFTSHIFT expression
Rule 49    expression -> expression RIGHTSHIFT expression
Rule 50    statement -> ident PLUSEQUAL expression ;
Rule 51    statement -> ident MINUSEQUAL expression ;
Rule 52    statement -> ident LEFTSHIFTEQUAL expression ;
Rule 53    statement -> ident RIGHTSHIFTEQUAL expression ;
Rule 54    expression -> ident ( func_args ) MAPSTO type
Rule 55    statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ;
Rule 56    statement -> AWAIT expression ;
Rule 57    func_args -> <empty>
Rule 58    func_args -> func_arg
Rule 59    func_args -> func_args , func_arg
Rule 60    func_arg -> ident = expression
Rule 61    expression -> ( expression )

Terminals, with rules where they appear

!                    : 33
&                    : 40
(                    : 2 26 27 28 54 55 61
)                    : 2 26 27 28 54 55 61
*                    : 36
+                    : 34
,                    : 11 23 25 55 59
-                    : 35
/                    : 37
;                    : 18 19 20 21 29 50 51 52 53 55 56
<                    : 38
=                    : 19 20 21 55 60
>                    : 39
ASYNC                : 55
AWAIT                : 56
BITS                 : 7
BOOL                 : 6
DIGITS               : 7 32
ELSE                 : 27
EQUAL                : 44
GREATEREQUAL         : 46
IDENT                : 3 8
IF                   : 26 27
INT                  : 4
LEFTSHIFT            : 48
LEFTSHIFTEQUAL       : 52
LESSEQUAL            : 47
LONG                 : 5
MAPSTO               : 54 55
MINUSEQUAL           : 51
NOTEQUAL             : 45
OPAND                : 42
OPOR                 : 43
PLUSEQUAL            : 50
RETURN               : 29
RIGHTSHIFT           : 49
RIGHTSHIFTEQUAL      : 53
WHILE                : 28
[                    : 7
]                    : 7
error                : 
{                    : 13
|                    : 41
}                    : 13

Nonterminals, with rules where they appear

block                : 2 26 27 27 28
constant             : 31
expression           : 19 20 24 25 26 27 28 29 33 34 34 35 35 36 36 37 37 38 38 39 39 40 40 41 41 42 42 43 43 44 44 45 45 46 46 47 47 48 48 49 49 50 51 52 53 56 60 61
expression_list      : 21 25
func_arg             : 58 59
func_args            : 54 55 59
func_decl            : 1
func_decl_arg        : 10 11
func_decl_args       : 2 11
ident                : 2 12 18 19 20 22 23 30 50 51 52 53 54 55 55 55 60
ident_list           : 21 23
program              : 0
statement            : 14 16 17
statements           : 13 17
type                 : 2 12 18 19 54 55

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . func_decl
    (2) func_decl -> . type ident ( func_decl_args ) block
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    IDENT           shift and go to state 7
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    program                        shift and go to state 2
    func_decl                      shift and go to state 6
    type                           shift and go to state 4

state 1

    (7) type -> BITS . [ DIGITS ]

    [               shift and go to state 9


state 2

    (0) S' -> program .



state 3

    (6) type -> BOOL .

    IDENT           reduce using rule 6 (type -> BOOL .)
    ;               reduce using rule 6 (type -> BOOL .)
    +               reduce using rule 6 (type -> BOOL .)
    -               reduce using rule 6 (type -> BOOL .)
    *               reduce using rule 6 (type -> BOOL .)
    /               reduce using rule 6 (type -> BOOL .)
    <               reduce using rule 6 (type -> BOOL .)
    >               reduce using rule 6 (type -> BOOL .)
    &               reduce using rule 6 (type -> BOOL .)
    |               reduce using rule 6 (type -> BOOL .)
    OPAND           reduce using rule 6 (type -> BOOL .)
    OPOR            reduce using rule 6 (type -> BOOL .)
    EQUAL           reduce using rule 6 (type -> BOOL .)
    NOTEQUAL        reduce using rule 6 (type -> BOOL .)
    GREATEREQUAL    reduce using rule 6 (type -> BOOL .)
    LESSEQUAL       reduce using rule 6 (type -> BOOL .)
    LEFTSHIFT       reduce using rule 6 (type -> BOOL .)
    RIGHTSHIFT      reduce using rule 6 (type -> BOOL .)
    )               reduce using rule 6 (type -> BOOL .)
    ,               reduce using rule 6 (type -> BOOL .)


state 4

    (2) func_decl -> type . ident ( func_decl_args ) block
    (8) ident -> . IDENT

    IDENT           shift and go to state 10

    ident                          shift and go to state 11

state 5

    (4) type -> INT .

    IDENT           reduce using rule 4 (type -> INT .)
    ;               reduce using rule 4 (type -> INT .)
    +               reduce using rule 4 (type -> INT .)
    -               reduce using rule 4 (type -> INT .)
    *               reduce using rule 4 (type -> INT .)
    /               reduce using rule 4 (type -> INT .)
    <               reduce using rule 4 (type -> INT .)
    >               reduce using rule 4 (type -> INT .)
    &               reduce using rule 4 (type -> INT .)
    |               reduce using rule 4 (type -> INT .)
    OPAND           reduce using rule 4 (type -> INT .)
    OPOR            reduce using rule 4 (type -> INT .)
    EQUAL           reduce using rule 4 (type -> INT .)
    NOTEQUAL        reduce using rule 4 (type -> INT .)
    GREATEREQUAL    reduce using rule 4 (type -> INT .)
    LESSEQUAL       reduce using rule 4 (type -> INT .)
    LEFTSHIFT       reduce using rule 4 (type -> INT .)
    RIGHTSHIFT      reduce using rule 4 (type -> INT .)
    )               reduce using rule 4 (type -> INT .)
    ,               reduce using rule 4 (type -> INT .)


state 6

    (1) program -> func_decl .

    $end            reduce using rule 1 (program -> func_decl .)


state 7

    (3) type -> IDENT .

    ;               reduce using rule 3 (type -> IDENT .)
    IDENT           reduce using rule 3 (type -> IDENT .)
    +               reduce using rule 3 (type -> IDENT .)
    -               reduce using rule 3 (type -> IDENT .)
    *               reduce using rule 3 (type -> IDENT .)
    /               reduce using rule 3 (type -> IDENT .)
    <               reduce using rule 3 (type -> IDENT .)
    >               reduce using rule 3 (type -> IDENT .)
    &               reduce using rule 3 (type -> IDENT .)
    |               reduce using rule 3 (type -> IDENT .)
    OPAND           reduce using rule 3 (type -> IDENT .)
    OPOR            reduce using rule 3 (type -> IDENT .)
    EQUAL           reduce using rule 3 (type -> IDENT .)
    NOTEQUAL        reduce using rule 3 (type -> IDENT .)
    GREATEREQUAL    reduce using rule 3 (type -> IDENT .)
    LESSEQUAL       reduce using rule 3 (type -> IDENT .)
    LEFTSHIFT       reduce using rule 3 (type -> IDENT .)
    RIGHTSHIFT      reduce using rule 3 (type -> IDENT .)
    )               reduce using rule 3 (type -> IDENT .)
    ,               reduce using rule 3 (type -> IDENT .)


state 8

    (5) type -> LONG .

    IDENT           reduce using rule 5 (type -> LONG .)
    ;               reduce using rule 5 (type -> LONG .)
    +               reduce using rule 5 (type -> LONG .)
    -               reduce using rule 5 (type -> LONG .)
    *               reduce using rule 5 (type -> LONG .)
    /               reduce using rule 5 (type -> LONG .)
    <               reduce using rule 5 (type -> LONG .)
    >               reduce using rule 5 (type -> LONG .)
    &               reduce using rule 5 (type -> LONG .)
    |               reduce using rule 5 (type -> LONG .)
    OPAND           reduce using rule 5 (type -> LONG .)
    OPOR            reduce using rule 5 (type -> LONG .)
    EQUAL           reduce using rule 5 (type -> LONG .)
    NOTEQUAL        reduce using rule 5 (type -> LONG .)
    GREATEREQUAL    reduce using rule 5 (type -> LONG .)
    LESSEQUAL       reduce using rule 5 (type -> LONG .)
    LEFTSHIFT       reduce using rule 5 (type -> LONG .)
    RIGHTSHIFT      reduce using rule 5 (type -> LONG .)
    )               reduce using rule 5 (type -> LONG .)
    ,               reduce using rule 5 (type -> LONG .)


state 9

    (7) type -> BITS [ . DIGITS ]

    DIGITS          shift and go to state 12


state 10

    (8) ident -> IDENT .

    (               reduce using rule 8 (ident -> IDENT .)
    +               reduce using rule 8 (ident -> IDENT .)
    -               reduce using rule 8 (ident -> IDENT .)
    *               reduce using rule 8 (ident -> IDENT .)
    /               reduce using rule 8 (ident -> IDENT .)
    <               reduce using rule 8 (ident -> IDENT .)
    >               reduce using rule 8 (ident -> IDENT .)
    &               reduce using rule 8 (ident -> IDENT .)
    |               reduce using rule 8 (ident -> IDENT .)
    OPAND           reduce using rule 8 (ident -> IDENT .)
    OPOR            reduce using rule 8 (ident -> IDENT .)
    EQUAL           reduce using rule 8 (ident -> IDENT .)
    NOTEQUAL        reduce using rule 8 (ident -> IDENT .)
    GREATEREQUAL    reduce using rule 8 (ident -> IDENT .)
    LESSEQUAL       reduce using rule 8 (ident -> IDENT .)
    LEFTSHIFT       reduce using rule 8 (ident -> IDENT .)
    RIGHTSHIFT      reduce using rule 8 (ident -> IDENT .)
    ;               reduce using rule 8 (ident -> IDENT .)
    )               reduce using rule 8 (ident -> IDENT .)
    ,               reduce using rule 8 (ident -> IDENT .)
    =               reduce using rule 8 (ident -> IDENT .)


state 11

    (2) func_decl -> type ident . ( func_decl_args ) block

    (               shift and go to state 13


state 12

    (7) type -> BITS [ DIGITS . ]

    ]               shift and go to state 14


state 13

    (2) func_decl -> type ident ( . func_decl_args ) block
    (9) func_decl_args -> .
    (10) func_decl_args -> . func_decl_arg
    (11) func_decl_args -> . func_decl_args , func_decl_arg
    (12) func_decl_arg -> . type ident
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    )               reduce using rule 9 (func_decl_args -> .)
    ,               reduce using rule 9 (func_decl_args -> .)
    IDENT           shift and go to state 7
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    type                           shift and go to state 15
    func_decl_args                 shift and go to state 16
    func_decl_arg                  shift and go to state 17

state 14

    (7) type -> BITS [ DIGITS ] .

    IDENT           reduce using rule 7 (type -> BITS [ DIGITS ] .)
    ;               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    +               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    -               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    *               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    /               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    <               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    >               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    &               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    |               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    OPAND           reduce using rule 7 (type -> BITS [ DIGITS ] .)
    OPOR            reduce using rule 7 (type -> BITS [ DIGITS ] .)
    EQUAL           reduce using rule 7 (type -> BITS [ DIGITS ] .)
    NOTEQUAL        reduce using rule 7 (type -> BITS [ DIGITS ] .)
    GREATEREQUAL    reduce using rule 7 (type -> BITS [ DIGITS ] .)
    LESSEQUAL       reduce using rule 7 (type -> BITS [ DIGITS ] .)
    LEFTSHIFT       reduce using rule 7 (type -> BITS [ DIGITS ] .)
    RIGHTSHIFT      reduce using rule 7 (type -> BITS [ DIGITS ] .)
    )               reduce using rule 7 (type -> BITS [ DIGITS ] .)
    ,               reduce using rule 7 (type -> BITS [ DIGITS ] .)


state 15

    (12) func_decl_arg -> type . ident
    (8) ident -> . IDENT

    IDENT           shift and go to state 10

    ident                          shift and go to state 18

state 16

    (2) func_decl -> type ident ( func_decl_args . ) block
    (11) func_decl_args -> func_decl_args . , func_decl_arg

    )               shift and go to state 19
    ,               shift and go to state 20


state 17

    (10) func_decl_args -> func_decl_arg .

    )               reduce using rule 10 (func_decl_args -> func_decl_arg .)
    ,               reduce using rule 10 (func_decl_args -> func_decl_arg .)


state 18

    (12) func_decl_arg -> type ident .

    )               reduce using rule 12 (func_decl_arg -> type ident .)
    ,               reduce using rule 12 (func_decl_arg -> type ident .)


state 19

    (2) func_decl -> type ident ( func_decl_args ) . block
    (13) block -> . { statements }
    (14) block -> . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . ident_list = expression_list ;
    (26) statement -> . IF ( expression ) block
    (27) statement -> . IF ( expression ) block ELSE block
    (28) statement -> . WHILE ( expression ) block
    (29) statement -> . RETURN expression ;
    (50) statement -> . ident PLUSEQUAL expression ;
    (51) statement -> . ident MINUSEQUAL expression ;
    (52) statement -> . ident LEFTSHIFTEQUAL expression ;
    (53) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (55) statement -> . ASYNC ident , ident = ident ( func_args ) MAPSTO type ;
    (56) statement -> . AWAIT expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT
    (22) ident_list -> . ident
    (23) ident_list -> . ident_list , ident

    {               shift and go to state 31
    IF              shift and go to state 27
    WHILE           shift and go to state 23
    RETURN          shift and go to state 28
    ASYNC           shift and go to state 32
    AWAIT           shift and go to state 24
    IDENT           shift and go to state 25
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    block                          shift and go to state 30
    ident                          shift and go to state 29
    ident_list                     shift and go to state 26
    type                           shift and go to state 22
    statement                      shift and go to state 21

state 20

    (11) func_decl_args -> func_decl_args , . func_decl_arg
    (12) func_decl_arg -> . type ident
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    IDENT           shift and go to state 7
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    type                           shift and go to state 15
    func_decl_arg                  shift and go to state 33

state 21

    (14) block -> statement .

    $end            reduce using rule 14 (block -> statement .)
    }               reduce using rule 14 (block -> statement .)
    IF              reduce using rule 14 (block -> statement .)
    WHILE           reduce using rule 14 (block -> statement .)
    RETURN          reduce using rule 14 (block -> statement .)
    ASYNC           reduce using rule 14 (block -> statement .)
    AWAIT           reduce using rule 14 (block -> statement .)
    IDENT           reduce using rule 14 (block -> statement .)
    INT             reduce using rule 14 (block -> statement .)
    LONG            reduce using rule 14 (block -> statement .)
    BOOL            reduce using rule 14 (block -> statement .)
    BITS            reduce using rule 14 (block -> statement .)
    ELSE            reduce using rule 14 (block -> statement .)


state 22

    (18) statement -> type . ident ;
    (19) statement -> type . ident = expression ;
    (8) ident -> . IDENT

    IDENT           shift and go to state 10

    ident                          shift and go to state 34

state 23

    (28) statement -> WHILE . ( expression ) block

    (               shift and go to state 35


state 24

    (56) statement -> AWAIT . expression ;
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 36

state 25

    (3) type -> IDENT .
    (8) ident -> IDENT .

    IDENT           reduce using rule 3 (type -> IDENT .)
    =               reduce using rule 8 (ident -> IDENT .)
    PLUSEQUAL       reduce using rule 8 (ident -> IDENT .)
    MINUSEQUAL      reduce using rule 8 (ident -> IDENT .)
    LEFTSHIFTEQUAL  reduce using rule 8 (ident -> IDENT .)
    RIGHTSHIFTEQUAL reduce using rule 8 (ident -> IDENT .)
    ,               reduce using rule 8 (ident -> IDENT .)


state 26

    (21) statement -> ident_list . = expression_list ;
    (23) ident_list -> ident_list . , ident

    =               shift and go to state 42
    ,               shift and go to state 43


state 27

    (26) statement -> IF . ( expression ) block
    (27) statement -> IF . ( expression ) block ELSE block

    (               shift and go to state 44


state 28

    (29) statement -> RETURN . expression ;
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 45

state 29

    (20) statement -> ident . = expression ;
    (50) statement -> ident . PLUSEQUAL expression ;
    (51) statement -> ident . MINUSEQUAL expression ;
    (52) statement -> ident . LEFTSHIFTEQUAL expression ;
    (53) statement -> ident . RIGHTSHIFTEQUAL expression ;
    (22) ident_list -> ident .

  ! shift/reduce conflict for = resolved as shift
    =               shift and go to state 46
    PLUSEQUAL       shift and go to state 49
    MINUSEQUAL      shift and go to state 48
    LEFTSHIFTEQUAL  shift and go to state 47
    RIGHTSHIFTEQUAL shift and go to state 50
    ,               reduce using rule 22 (ident_list -> ident .)

  ! =               [ reduce using rule 22 (ident_list -> ident .) ]


state 30

    (2) func_decl -> type ident ( func_decl_args ) block .

    $end            reduce using rule 2 (func_decl -> type ident ( func_decl_args ) block .)


state 31

    (13) block -> { . statements }
    (15) statements -> .
    (16) statements -> . statement
    (17) statements -> . statements statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . ident_list = expression_list ;
    (26) statement -> . IF ( expression ) block
    (27) statement -> . IF ( expression ) block ELSE block
    (28) statement -> . WHILE ( expression ) block
    (29) statement -> . RETURN expression ;
    (50) statement -> . ident PLUSEQUAL expression ;
    (51) statement -> . ident MINUSEQUAL expression ;
    (52) statement -> . ident LEFTSHIFTEQUAL expression ;
    (53) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (55) statement -> . ASYNC ident , ident = ident ( func_args ) MAPSTO type ;
    (56) statement -> . AWAIT expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT
    (22) ident_list -> . ident
    (23) ident_list -> . ident_list , ident

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for ASYNC resolved as shift
  ! shift/reduce conflict for AWAIT resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
  ! shift/reduce conflict for INT resolved as shift
  ! shift/reduce conflict for LONG resolved as shift
  ! shift/reduce conflict for BOOL resolved as shift
  ! shift/reduce conflict for BITS resolved as shift
    }               reduce using rule 15 (statements -> .)
    IF              shift and go to state 27
    WHILE           shift and go to state 23
    RETURN          shift and go to state 28
    ASYNC           shift and go to state 32
    AWAIT           shift and go to state 24
    IDENT           shift and go to state 25
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

  ! IF              [ reduce using rule 15 (statements -> .) ]
  ! WHILE           [ reduce using rule 15 (statements -> .) ]
  ! RETURN          [ reduce using rule 15 (statements -> .) ]
  ! ASYNC           [ reduce using rule 15 (statements -> .) ]
  ! AWAIT           [ reduce using rule 15 (statements -> .) ]
  ! IDENT           [ reduce using rule 15 (statements -> .) ]
  ! INT             [ reduce using rule 15 (statements -> .) ]
  ! LONG            [ reduce using rule 15 (statements -> .) ]
  ! BOOL            [ reduce using rule 15 (statements -> .) ]
  ! BITS            [ reduce using rule 15 (statements -> .) ]

    statements                     shift and go to state 52
    ident                          shift and go to state 29
    ident_list                     shift and go to state 26
    type                           shift and go to state 22
    statement                      shift and go to state 51

state 32

    (55) statement -> ASYNC . ident , ident = ident ( func_args ) MAPSTO type ;
    (8) ident -> . IDENT

    IDENT           shift and go to state 10

    ident                          shift and go to state 53

state 33

    (11) func_decl_args -> func_decl_args , func_decl_arg .

    )               reduce using rule 11 (func_decl_args -> func_decl_args , func_decl_arg .)
    ,               reduce using rule 11 (func_decl_args -> func_decl_args , func_decl_arg .)


state 34

    (18) statement -> type ident . ;
    (19) statement -> type ident . = expression ;

    ;               shift and go to state 55
    =               shift and go to state 54


state 35

    (28) statement -> WHILE ( . expression ) block
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    ident                          shift and go to state 40
    constant                       shift and go to state 39
    expression                     shift and go to state 56

state 36

    (56) statement -> AWAIT expression . ;
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 62
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 37

    (33) expression -> ! . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 74

state 38

    (32) constant -> DIGITS .

    +               reduce using rule 32 (constant -> DIGITS .)
    -               reduce using rule 32 (constant -> DIGITS .)
    *               reduce using rule 32 (constant -> DIGITS .)
    /               reduce using rule 32 (constant -> DIGITS .)
    <               reduce using rule 32 (constant -> DIGITS .)
    >               reduce using rule 32 (constant -> DIGITS .)
    &               reduce using rule 32 (constant -> DIGITS .)
    |               reduce using rule 32 (constant -> DIGITS .)
    OPAND           reduce using rule 32 (constant -> DIGITS .)
    OPOR            reduce using rule 32 (constant -> DIGITS .)
    EQUAL           reduce using rule 32 (constant -> DIGITS .)
    NOTEQUAL        reduce using rule 32 (constant -> DIGITS .)
    GREATEREQUAL    reduce using rule 32 (constant -> DIGITS .)
    LESSEQUAL       reduce using rule 32 (constant -> DIGITS .)
    LEFTSHIFT       reduce using rule 32 (constant -> DIGITS .)
    RIGHTSHIFT      reduce using rule 32 (constant -> DIGITS .)
    ;               reduce using rule 32 (constant -> DIGITS .)
    )               reduce using rule 32 (constant -> DIGITS .)
    ,               reduce using rule 32 (constant -> DIGITS .)


state 39

    (31) expression -> constant .

    +               reduce using rule 31 (expression -> constant .)
    -               reduce using rule 31 (expression -> constant .)
    *               reduce using rule 31 (expression -> constant .)
    /               reduce using rule 31 (expression -> constant .)
    <               reduce using rule 31 (expression -> constant .)
    >               reduce using rule 31 (expression -> constant .)
    &               reduce using rule 31 (expression -> constant .)
    |               reduce using rule 31 (expression -> constant .)
    OPAND           reduce using rule 31 (expression -> constant .)
    OPOR            reduce using rule 31 (expression -> constant .)
    EQUAL           reduce using rule 31 (expression -> constant .)
    NOTEQUAL        reduce using rule 31 (expression -> constant .)
    GREATEREQUAL    reduce using rule 31 (expression -> constant .)
    LESSEQUAL       reduce using rule 31 (expression -> constant .)
    LEFTSHIFT       reduce using rule 31 (expression -> constant .)
    RIGHTSHIFT      reduce using rule 31 (expression -> constant .)
    ;               reduce using rule 31 (expression -> constant .)
    )               reduce using rule 31 (expression -> constant .)
    ,               reduce using rule 31 (expression -> constant .)


state 40

    (30) expression -> ident .
    (54) expression -> ident . ( func_args ) MAPSTO type

    +               reduce using rule 30 (expression -> ident .)
    -               reduce using rule 30 (expression -> ident .)
    *               reduce using rule 30 (expression -> ident .)
    /               reduce using rule 30 (expression -> ident .)
    <               reduce using rule 30 (expression -> ident .)
    >               reduce using rule 30 (expression -> ident .)
    &               reduce using rule 30 (expression -> ident .)
    |               reduce using rule 30 (expression -> ident .)
    OPAND           reduce using rule 30 (expression -> ident .)
    OPOR            reduce using rule 30 (expression -> ident .)
    EQUAL           reduce using rule 30 (expression -> ident .)
    NOTEQUAL        reduce using rule 30 (expression -> ident .)
    GREATEREQUAL    reduce using rule 30 (expression -> ident .)
    LESSEQUAL       reduce using rule 30 (expression -> ident .)
    LEFTSHIFT       reduce using rule 30 (expression -> ident .)
    RIGHTSHIFT      reduce using rule 30 (expression -> ident .)
    ;               reduce using rule 30 (expression -> ident .)
    )               reduce using rule 30 (expression -> ident .)
    ,               reduce using rule 30 (expression -> ident .)
    (               shift and go to state 75


state 41

    (61) expression -> ( . expression )
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 76

state 42

    (21) statement -> ident_list = . expression_list ;
    (24) expression_list -> . expression
    (25) expression_list -> . expression_list , expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    ident                          shift and go to state 40
    constant                       shift and go to state 39
    expression_list                shift and go to state 78
    expression                     shift and go to state 77

state 43

    (23) ident_list -> ident_list , . ident
    (8) ident -> . IDENT

    IDENT           shift and go to state 10

    ident                          shift and go to state 79

state 44

    (26) statement -> IF ( . expression ) block
    (27) statement -> IF ( . expression ) block ELSE block
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    ident                          shift and go to state 40
    constant                       shift and go to state 39
    expression                     shift and go to state 80

state 45

    (29) statement -> RETURN expression . ;
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 81
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 46

    (20) statement -> ident = . expression ;
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 82

state 47

    (52) statement -> ident LEFTSHIFTEQUAL . expression ;
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 83

state 48

    (51) statement -> ident MINUSEQUAL . expression ;
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 84

state 49

    (50) statement -> ident PLUSEQUAL . expression ;
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 85

state 50

    (53) statement -> ident RIGHTSHIFTEQUAL . expression ;
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 86

state 51

    (16) statements -> statement .

    }               reduce using rule 16 (statements -> statement .)
    IF              reduce using rule 16 (statements -> statement .)
    WHILE           reduce using rule 16 (statements -> statement .)
    RETURN          reduce using rule 16 (statements -> statement .)
    ASYNC           reduce using rule 16 (statements -> statement .)
    AWAIT           reduce using rule 16 (statements -> statement .)
    IDENT           reduce using rule 16 (statements -> statement .)
    INT             reduce using rule 16 (statements -> statement .)
    LONG            reduce using rule 16 (statements -> statement .)
    BOOL            reduce using rule 16 (statements -> statement .)
    BITS            reduce using rule 16 (statements -> statement .)


state 52

    (13) block -> { statements . }
    (17) statements -> statements . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . ident_list = expression_list ;
    (26) statement -> . IF ( expression ) block
    (27) statement -> . IF ( expression ) block ELSE block
    (28) statement -> . WHILE ( expression ) block
    (29) statement -> . RETURN expression ;
    (50) statement -> . ident PLUSEQUAL expression ;
    (51) statement -> . ident MINUSEQUAL expression ;
    (52) statement -> . ident LEFTSHIFTEQUAL expression ;
    (53) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (55) statement -> . ASYNC ident , ident = ident ( func_args ) MAPSTO type ;
    (56) statement -> . AWAIT expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT
    (22) ident_list -> . ident
    (23) ident_list -> . ident_list , ident

    }               shift and go to state 88
    IF              shift and go to state 27
    WHILE           shift and go to state 23
    RETURN          shift and go to state 28
    ASYNC           shift and go to state 32
    AWAIT           shift and go to state 24
    IDENT           shift and go to state 25
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    ident                          shift and go to state 29
    ident_list                     shift and go to state 26
    type                           shift and go to state 22
    statement                      shift and go to state 87

state 53

    (55) statement -> ASYNC ident . , ident = ident ( func_args ) MAPSTO type ;

    ,               shift and go to state 89


state 54

    (19) statement -> type ident = . expression ;
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 90

state 55

    (18) statement -> type ident ; .

    $end            reduce using rule 18 (statement -> type ident ; .)
    }               reduce using rule 18 (statement -> type ident ; .)
    IF              reduce using rule 18 (statement -> type ident ; .)
    WHILE           reduce using rule 18 (statement -> type ident ; .)
    RETURN          reduce using rule 18 (statement -> type ident ; .)
    ASYNC           reduce using rule 18 (statement -> type ident ; .)
    AWAIT           reduce using rule 18 (statement -> type ident ; .)
    IDENT           reduce using rule 18 (statement -> type ident ; .)
    INT             reduce using rule 18 (statement -> type ident ; .)
    LONG            reduce using rule 18 (statement -> type ident ; .)
    BOOL            reduce using rule 18 (statement -> type ident ; .)
    BITS            reduce using rule 18 (statement -> type ident ; .)
    ELSE            reduce using rule 18 (statement -> type ident ; .)


state 56

    (28) statement -> WHILE ( expression . ) block
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 91
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 57

    (40) expression -> expression & . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 92

state 58

    (35) expression -> expression - . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 93

state 59

    (39) expression -> expression > . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 94

state 60

    (46) expression -> expression GREATEREQUAL . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 95

state 61

    (42) expression -> expression OPAND . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 96

state 62

    (56) statement -> AWAIT expression ; .

    $end            reduce using rule 56 (statement -> AWAIT expression ; .)
    }               reduce using rule 56 (statement -> AWAIT expression ; .)
    IF              reduce using rule 56 (statement -> AWAIT expression ; .)
    WHILE           reduce using rule 56 (statement -> AWAIT expression ; .)
    RETURN          reduce using rule 56 (statement -> AWAIT expression ; .)
    ASYNC           reduce using rule 56 (statement -> AWAIT expression ; .)
    AWAIT           reduce using rule 56 (statement -> AWAIT expression ; .)
    IDENT           reduce using rule 56 (statement -> AWAIT expression ; .)
    INT             reduce using rule 56 (statement -> AWAIT expression ; .)
    LONG            reduce using rule 56 (statement -> AWAIT expression ; .)
    BOOL            reduce using rule 56 (statement -> AWAIT expression ; .)
    BITS            reduce using rule 56 (statement -> AWAIT expression ; .)
    ELSE            reduce using rule 56 (statement -> AWAIT expression ; .)


state 63

    (47) expression -> expression LESSEQUAL . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 97

state 64

    (38) expression -> expression < . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 98

state 65

    (43) expression -> expression OPOR . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 99

state 66

    (41) expression -> expression | . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 100

state 67

    (49) expression -> expression RIGHTSHIFT . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 101

state 68

    (34) expression -> expression + . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 102

state 69

    (45) expression -> expression NOTEQUAL . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 103

state 70

    (37) expression -> expression / . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 104

state 71

    (44) expression -> expression EQUAL . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 105

state 72

    (36) expression -> expression * . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 106

state 73

    (48) expression -> expression LEFTSHIFT . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 107

state 74

    (33) expression -> ! expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

  ! shift/reduce conflict for + resolved as shift
  ! shift/reduce conflict for - resolved as shift
  ! shift/reduce conflict for * resolved as shift
  ! shift/reduce conflict for / resolved as shift
  ! shift/reduce conflict for < resolved as shift
  ! shift/reduce conflict for > resolved as shift
  ! shift/reduce conflict for & resolved as shift
  ! shift/reduce conflict for | resolved as shift
  ! shift/reduce conflict for OPAND resolved as shift
  ! shift/reduce conflict for OPOR resolved as shift
  ! shift/reduce conflict for EQUAL resolved as shift
  ! shift/reduce conflict for NOTEQUAL resolved as shift
  ! shift/reduce conflict for GREATEREQUAL resolved as shift
  ! shift/reduce conflict for LESSEQUAL resolved as shift
  ! shift/reduce conflict for LEFTSHIFT resolved as shift
  ! shift/reduce conflict for RIGHTSHIFT resolved as shift
    ;               reduce using rule 33 (expression -> ! expression .)
    )               reduce using rule 33 (expression -> ! expression .)
    ,               reduce using rule 33 (expression -> ! expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 33 (expression -> ! expression .) ]
  ! -               [ reduce using rule 33 (expression -> ! expression .) ]
  ! *               [ reduce using rule 33 (expression -> ! expression .) ]
  ! /               [ reduce using rule 33 (expression -> ! expression .) ]
  ! <               [ reduce using rule 33 (expression -> ! expression .) ]
  ! >               [ reduce using rule 33 (expression -> ! expression .) ]
  ! &               [ reduce using rule 33 (expression -> ! expression .) ]
  ! |               [ reduce using rule 33 (expression -> ! expression .) ]
  ! OPAND           [ reduce using rule 33 (expression -> ! expression .) ]
  ! OPOR            [ reduce using rule 33 (expression -> ! expression .) ]
  ! EQUAL           [ reduce using rule 33 (expression -> ! expression .) ]
  ! NOTEQUAL        [ reduce using rule 33 (expression -> ! expression .) ]
  ! GREATEREQUAL    [ reduce using rule 33 (expression -> ! expression .) ]
  ! LESSEQUAL       [ reduce using rule 33 (expression -> ! expression .) ]
  ! LEFTSHIFT       [ reduce using rule 33 (expression -> ! expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 33 (expression -> ! expression .) ]


state 75

    (54) expression -> ident ( . func_args ) MAPSTO type
    (57) func_args -> .
    (58) func_args -> . func_arg
    (59) func_args -> . func_args , func_arg
    (60) func_arg -> . ident = expression
    (8) ident -> . IDENT

    )               reduce using rule 57 (func_args -> .)
    ,               reduce using rule 57 (func_args -> .)
    IDENT           shift and go to state 10

    func_arg                       shift and go to state 109
    ident                          shift and go to state 108
    func_args                      shift and go to state 110

state 76

    (61) expression -> ( expression . )
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 111
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 77

    (24) expression_list -> expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 24 (expression_list -> expression .)
    ,               reduce using rule 24 (expression_list -> expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 78

    (21) statement -> ident_list = expression_list . ;
    (25) expression_list -> expression_list . , expression

    ;               shift and go to state 113
    ,               shift and go to state 112


state 79

    (23) ident_list -> ident_list , ident .

    =               reduce using rule 23 (ident_list -> ident_list , ident .)
    ,               reduce using rule 23 (ident_list -> ident_list , ident .)


state 80

    (26) statement -> IF ( expression . ) block
    (27) statement -> IF ( expression . ) block ELSE block
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 114
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 81

    (29) statement -> RETURN expression ; .

    $end            reduce using rule 29 (statement -> RETURN expression ; .)
    }               reduce using rule 29 (statement -> RETURN expression ; .)
    IF              reduce using rule 29 (statement -> RETURN expression ; .)
    WHILE           reduce using rule 29 (statement -> RETURN expression ; .)
    RETURN          reduce using rule 29 (statement -> RETURN expression ; .)
    ASYNC           reduce using rule 29 (statement -> RETURN expression ; .)
    AWAIT           reduce using rule 29 (statement -> RETURN expression ; .)
    IDENT           reduce using rule 29 (statement -> RETURN expression ; .)
    INT             reduce using rule 29 (statement -> RETURN expression ; .)
    LONG            reduce using rule 29 (statement -> RETURN expression ; .)
    BOOL            reduce using rule 29 (statement -> RETURN expression ; .)
    BITS            reduce using rule 29 (statement -> RETURN expression ; .)
    ELSE            reduce using rule 29 (statement -> RETURN expression ; .)


state 82

    (20) statement -> ident = expression . ;
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 115
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 83

    (52) statement -> ident LEFTSHIFTEQUAL expression . ;
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 116
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 84

    (51) statement -> ident MINUSEQUAL expression . ;
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 117
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 85

    (50) statement -> ident PLUSEQUAL expression . ;
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 118
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 86

    (53) statement -> ident RIGHTSHIFTEQUAL expression . ;
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 119
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 87

    (17) statements -> statements statement .

    }               reduce using rule 17 (statements -> statements statement .)
    IF              reduce using rule 17 (statements -> statements statement .)
    WHILE           reduce using rule 17 (statements -> statements statement .)
    RETURN          reduce using rule 17 (statements -> statements statement .)
    ASYNC           reduce using rule 17 (statements -> statements statement .)
    AWAIT           reduce using rule 17 (statements -> statements statement .)
    IDENT           reduce using rule 17 (statements -> statements statement .)
    INT             reduce using rule 17 (statements -> statements statement .)
    LONG            reduce using rule 17 (statements -> statements statement .)
    BOOL            reduce using rule 17 (statements -> statements statement .)
    BITS            reduce using rule 17 (statements -> statements statement .)


state 88

    (13) block -> { statements } .

    $end            reduce using rule 13 (block -> { statements } .)
    }               reduce using rule 13 (block -> { statements } .)
    IF              reduce using rule 13 (block -> { statements } .)
    WHILE           reduce using rule 13 (block -> { statements } .)
    RETURN          reduce using rule 13 (block -> { statements } .)
    ASYNC           reduce using rule 13 (block -> { statements } .)
    AWAIT           reduce using rule 13 (block -> { statements } .)
    IDENT           reduce using rule 13 (block -> { statements } .)
    INT             reduce using rule 13 (block -> { statements } .)
    LONG            reduce using rule 13 (block -> { statements } .)
    BOOL            reduce using rule 13 (block -> { statements } .)
    BITS            reduce using rule 13 (block -> { statements } .)
    ELSE            reduce using rule 13 (block -> { statements } .)


state 89

    (55) statement -> ASYNC ident , . ident = ident ( func_args ) MAPSTO type ;
    (8) ident -> . IDENT

    IDENT           shift and go to state 10

    ident                          shift and go to state 120

state 90

    (19) statement -> type ident = expression . ;
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 121
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 91

    (28) statement -> WHILE ( expression ) . block
    (13) block -> . { statements }
    (14) block -> . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . ident_list = expression_list ;
    (26) statement -> . IF ( expression ) block
    (27) statement -> . IF ( expression ) block ELSE block
    (28) statement -> . WHILE ( expression ) block
    (29) statement -> . RETURN expression ;
    (50) statement -> . ident PLUSEQUAL expression ;
    (51) statement -> . ident MINUSEQUAL expression ;
    (52) statement -> . ident LEFTSHIFTEQUAL expression ;
    (53) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (55) statement -> . ASYNC ident , ident = ident ( func_args ) MAPSTO type ;
    (56) statement -> . AWAIT expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT
    (22) ident_list -> . ident
    (23) ident_list -> . ident_list , ident

    {               shift and go to state 31
    IF              shift and go to state 27
    WHILE           shift and go to state 23
    RETURN          shift and go to state 28
    ASYNC           shift and go to state 32
    AWAIT           shift and go to state 24
    IDENT           shift and go to state 25
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    block                          shift and go to state 122
    ident                          shift and go to state 29
    ident_list                     shift and go to state 26
    type                           shift and go to state 22
    statement                      shift and go to state 21

state 92

    (40) expression -> expression & expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    &               reduce using rule 40 (expression -> expression & expression .)
    |               reduce using rule 40 (expression -> expression & expression .)
    ;               reduce using rule 40 (expression -> expression & expression .)
    )               reduce using rule 40 (expression -> expression & expression .)
    ,               reduce using rule 40 (expression -> expression & expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 40 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 40 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 40 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 40 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 40 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 40 (expression -> expression & expression .) ]
  ! OPAND           [ reduce using rule 40 (expression -> expression & expression .) ]
  ! OPOR            [ reduce using rule 40 (expression -> expression & expression .) ]
  ! EQUAL           [ reduce using rule 40 (expression -> expression & expression .) ]
  ! NOTEQUAL        [ reduce using rule 40 (expression -> expression & expression .) ]
  ! GREATEREQUAL    [ reduce using rule 40 (expression -> expression & expression .) ]
  ! LESSEQUAL       [ reduce using rule 40 (expression -> expression & expression .) ]
  ! LEFTSHIFT       [ reduce using rule 40 (expression -> expression & expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 40 (expression -> expression & expression .) ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]


state 93

    (35) expression -> expression - expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    +               reduce using rule 35 (expression -> expression - expression .)
    -               reduce using rule 35 (expression -> expression - expression .)
    <               reduce using rule 35 (expression -> expression - expression .)
    >               reduce using rule 35 (expression -> expression - expression .)
    &               reduce using rule 35 (expression -> expression - expression .)
    |               reduce using rule 35 (expression -> expression - expression .)
    OPAND           reduce using rule 35 (expression -> expression - expression .)
    OPOR            reduce using rule 35 (expression -> expression - expression .)
    EQUAL           reduce using rule 35 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 35 (expression -> expression - expression .)
    GREATEREQUAL    reduce using rule 35 (expression -> expression - expression .)
    LESSEQUAL       reduce using rule 35 (expression -> expression - expression .)
    LEFTSHIFT       reduce using rule 35 (expression -> expression - expression .)
    RIGHTSHIFT      reduce using rule 35 (expression -> expression - expression .)
    ;               reduce using rule 35 (expression -> expression - expression .)
    )               reduce using rule 35 (expression -> expression - expression .)
    ,               reduce using rule 35 (expression -> expression - expression .)
    *               shift and go to state 72
    /               shift and go to state 70

  ! *               [ reduce using rule 35 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 35 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 58 ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]
  ! LEFTSHIFT       [ shift and go to state 73 ]
  ! RIGHTSHIFT      [ shift and go to state 67 ]


state 94

    (39) expression -> expression > expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 39 (expression -> expression > expression .)
    >               reduce using rule 39 (expression -> expression > expression .)
    &               reduce using rule 39 (expression -> expression > expression .)
    |               reduce using rule 39 (expression -> expression > expression .)
    OPAND           reduce using rule 39 (expression -> expression > expression .)
    OPOR            reduce using rule 39 (expression -> expression > expression .)
    EQUAL           reduce using rule 39 (expression -> expression > expression .)
    NOTEQUAL        reduce using rule 39 (expression -> expression > expression .)
    GREATEREQUAL    reduce using rule 39 (expression -> expression > expression .)
    LESSEQUAL       reduce using rule 39 (expression -> expression > expression .)
    ;               reduce using rule 39 (expression -> expression > expression .)
    )               reduce using rule 39 (expression -> expression > expression .)
    ,               reduce using rule 39 (expression -> expression > expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 39 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 39 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 39 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 39 (expression -> expression > expression .) ]
  ! LEFTSHIFT       [ reduce using rule 39 (expression -> expression > expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 39 (expression -> expression > expression .) ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]


state 95

    (46) expression -> expression GREATEREQUAL expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    >               reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    &               reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    |               reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    OPAND           reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    OPOR            reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    EQUAL           reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    NOTEQUAL        reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    GREATEREQUAL    reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    LESSEQUAL       reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    ;               reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    )               reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    ,               reduce using rule 46 (expression -> expression GREATEREQUAL expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 46 (expression -> expression GREATEREQUAL expression .) ]
  ! -               [ reduce using rule 46 (expression -> expression GREATEREQUAL expression .) ]
  ! *               [ reduce using rule 46 (expression -> expression GREATEREQUAL expression .) ]
  ! /               [ reduce using rule 46 (expression -> expression GREATEREQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 46 (expression -> expression GREATEREQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 46 (expression -> expression GREATEREQUAL expression .) ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]


state 96

    (42) expression -> expression OPAND expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    &               reduce using rule 42 (expression -> expression OPAND expression .)
    |               reduce using rule 42 (expression -> expression OPAND expression .)
    OPAND           reduce using rule 42 (expression -> expression OPAND expression .)
    OPOR            reduce using rule 42 (expression -> expression OPAND expression .)
    ;               reduce using rule 42 (expression -> expression OPAND expression .)
    )               reduce using rule 42 (expression -> expression OPAND expression .)
    ,               reduce using rule 42 (expression -> expression OPAND expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! -               [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! *               [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! /               [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! <               [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! >               [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! EQUAL           [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! NOTEQUAL        [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! GREATEREQUAL    [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! LESSEQUAL       [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! LEFTSHIFT       [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 42 (expression -> expression OPAND expression .) ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]


state 97

    (47) expression -> expression LESSEQUAL expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    >               reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    &               reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    |               reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    OPAND           reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    OPOR            reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    EQUAL           reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    NOTEQUAL        reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    GREATEREQUAL    reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    LESSEQUAL       reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    ;               reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    )               reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    ,               reduce using rule 47 (expression -> expression LESSEQUAL expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 47 (expression -> expression LESSEQUAL expression .) ]
  ! -               [ reduce using rule 47 (expression -> expression LESSEQUAL expression .) ]
  ! *               [ reduce using rule 47 (expression -> expression LESSEQUAL expression .) ]
  ! /               [ reduce using rule 47 (expression -> expression LESSEQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 47 (expression -> expression LESSEQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 47 (expression -> expression LESSEQUAL expression .) ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]


state 98

    (38) expression -> expression < expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 38 (expression -> expression < expression .)
    >               reduce using rule 38 (expression -> expression < expression .)
    &               reduce using rule 38 (expression -> expression < expression .)
    |               reduce using rule 38 (expression -> expression < expression .)
    OPAND           reduce using rule 38 (expression -> expression < expression .)
    OPOR            reduce using rule 38 (expression -> expression < expression .)
    EQUAL           reduce using rule 38 (expression -> expression < expression .)
    NOTEQUAL        reduce using rule 38 (expression -> expression < expression .)
    GREATEREQUAL    reduce using rule 38 (expression -> expression < expression .)
    LESSEQUAL       reduce using rule 38 (expression -> expression < expression .)
    ;               reduce using rule 38 (expression -> expression < expression .)
    )               reduce using rule 38 (expression -> expression < expression .)
    ,               reduce using rule 38 (expression -> expression < expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 38 (expression -> expression < expression .) ]
  ! LEFTSHIFT       [ reduce using rule 38 (expression -> expression < expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 38 (expression -> expression < expression .) ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]


state 99

    (43) expression -> expression OPOR expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    &               reduce using rule 43 (expression -> expression OPOR expression .)
    |               reduce using rule 43 (expression -> expression OPOR expression .)
    OPOR            reduce using rule 43 (expression -> expression OPOR expression .)
    ;               reduce using rule 43 (expression -> expression OPOR expression .)
    )               reduce using rule 43 (expression -> expression OPOR expression .)
    ,               reduce using rule 43 (expression -> expression OPOR expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    OPAND           shift and go to state 61
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! -               [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! *               [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! /               [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! <               [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! >               [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! OPAND           [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! EQUAL           [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! NOTEQUAL        [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! GREATEREQUAL    [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! LESSEQUAL       [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! LEFTSHIFT       [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 43 (expression -> expression OPOR expression .) ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPOR            [ shift and go to state 65 ]


state 100

    (41) expression -> expression | expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    |               reduce using rule 41 (expression -> expression | expression .)
    ;               reduce using rule 41 (expression -> expression | expression .)
    )               reduce using rule 41 (expression -> expression | expression .)
    ,               reduce using rule 41 (expression -> expression | expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 41 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 41 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 41 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 41 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 41 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 41 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 41 (expression -> expression | expression .) ]
  ! OPAND           [ reduce using rule 41 (expression -> expression | expression .) ]
  ! OPOR            [ reduce using rule 41 (expression -> expression | expression .) ]
  ! EQUAL           [ reduce using rule 41 (expression -> expression | expression .) ]
  ! NOTEQUAL        [ reduce using rule 41 (expression -> expression | expression .) ]
  ! GREATEREQUAL    [ reduce using rule 41 (expression -> expression | expression .) ]
  ! LESSEQUAL       [ reduce using rule 41 (expression -> expression | expression .) ]
  ! LEFTSHIFT       [ reduce using rule 41 (expression -> expression | expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 41 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 66 ]


state 101

    (49) expression -> expression RIGHTSHIFT expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    >               reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    &               reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    |               reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    OPAND           reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    OPOR            reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    EQUAL           reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    NOTEQUAL        reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    GREATEREQUAL    reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    LESSEQUAL       reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    LEFTSHIFT       reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    RIGHTSHIFT      reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    ;               reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    )               reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    ,               reduce using rule 49 (expression -> expression RIGHTSHIFT expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70

  ! +               [ reduce using rule 49 (expression -> expression RIGHTSHIFT expression .) ]
  ! -               [ reduce using rule 49 (expression -> expression RIGHTSHIFT expression .) ]
  ! *               [ reduce using rule 49 (expression -> expression RIGHTSHIFT expression .) ]
  ! /               [ reduce using rule 49 (expression -> expression RIGHTSHIFT expression .) ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]
  ! LEFTSHIFT       [ shift and go to state 73 ]
  ! RIGHTSHIFT      [ shift and go to state 67 ]


state 102

    (34) expression -> expression + expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    +               reduce using rule 34 (expression -> expression + expression .)
    -               reduce using rule 34 (expression -> expression + expression .)
    <               reduce using rule 34 (expression -> expression + expression .)
    >               reduce using rule 34 (expression -> expression + expression .)
    &               reduce using rule 34 (expression -> expression + expression .)
    |               reduce using rule 34 (expression -> expression + expression .)
    OPAND           reduce using rule 34 (expression -> expression + expression .)
    OPOR            reduce using rule 34 (expression -> expression + expression .)
    EQUAL           reduce using rule 34 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 34 (expression -> expression + expression .)
    GREATEREQUAL    reduce using rule 34 (expression -> expression + expression .)
    LESSEQUAL       reduce using rule 34 (expression -> expression + expression .)
    LEFTSHIFT       reduce using rule 34 (expression -> expression + expression .)
    RIGHTSHIFT      reduce using rule 34 (expression -> expression + expression .)
    ;               reduce using rule 34 (expression -> expression + expression .)
    )               reduce using rule 34 (expression -> expression + expression .)
    ,               reduce using rule 34 (expression -> expression + expression .)
    *               shift and go to state 72
    /               shift and go to state 70

  ! *               [ reduce using rule 34 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 34 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 58 ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]
  ! LEFTSHIFT       [ shift and go to state 73 ]
  ! RIGHTSHIFT      [ shift and go to state 67 ]


state 103

    (45) expression -> expression NOTEQUAL expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    >               reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    &               reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    |               reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    OPAND           reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    OPOR            reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    EQUAL           reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    GREATEREQUAL    reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    LESSEQUAL       reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    ;               reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    )               reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    ,               reduce using rule 45 (expression -> expression NOTEQUAL expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 45 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 45 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 45 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 45 (expression -> expression NOTEQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 45 (expression -> expression NOTEQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 45 (expression -> expression NOTEQUAL expression .) ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]


state 104

    (37) expression -> expression / expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    +               reduce using rule 37 (expression -> expression / expression .)
    -               reduce using rule 37 (expression -> expression / expression .)
    *               reduce using rule 37 (expression -> expression / expression .)
    /               reduce using rule 37 (expression -> expression / expression .)
    <               reduce using rule 37 (expression -> expression / expression .)
    >               reduce using rule 37 (expression -> expression / expression .)
    &               reduce using rule 37 (expression -> expression / expression .)
    |               reduce using rule 37 (expression -> expression / expression .)
    OPAND           reduce using rule 37 (expression -> expression / expression .)
    OPOR            reduce using rule 37 (expression -> expression / expression .)
    EQUAL           reduce using rule 37 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 37 (expression -> expression / expression .)
    GREATEREQUAL    reduce using rule 37 (expression -> expression / expression .)
    LESSEQUAL       reduce using rule 37 (expression -> expression / expression .)
    LEFTSHIFT       reduce using rule 37 (expression -> expression / expression .)
    RIGHTSHIFT      reduce using rule 37 (expression -> expression / expression .)
    ;               reduce using rule 37 (expression -> expression / expression .)
    )               reduce using rule 37 (expression -> expression / expression .)
    ,               reduce using rule 37 (expression -> expression / expression .)

  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 72 ]
  ! /               [ shift and go to state 70 ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]
  ! LEFTSHIFT       [ shift and go to state 73 ]
  ! RIGHTSHIFT      [ shift and go to state 67 ]


state 105

    (44) expression -> expression EQUAL expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 44 (expression -> expression EQUAL expression .)
    >               reduce using rule 44 (expression -> expression EQUAL expression .)
    &               reduce using rule 44 (expression -> expression EQUAL expression .)
    |               reduce using rule 44 (expression -> expression EQUAL expression .)
    OPAND           reduce using rule 44 (expression -> expression EQUAL expression .)
    OPOR            reduce using rule 44 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 44 (expression -> expression EQUAL expression .)
    NOTEQUAL        reduce using rule 44 (expression -> expression EQUAL expression .)
    GREATEREQUAL    reduce using rule 44 (expression -> expression EQUAL expression .)
    LESSEQUAL       reduce using rule 44 (expression -> expression EQUAL expression .)
    ;               reduce using rule 44 (expression -> expression EQUAL expression .)
    )               reduce using rule 44 (expression -> expression EQUAL expression .)
    ,               reduce using rule 44 (expression -> expression EQUAL expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67

  ! +               [ reduce using rule 44 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 44 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 44 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 44 (expression -> expression EQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 44 (expression -> expression EQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 44 (expression -> expression EQUAL expression .) ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]


state 106

    (36) expression -> expression * expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    +               reduce using rule 36 (expression -> expression * expression .)
    -               reduce using rule 36 (expression -> expression * expression .)
    *               reduce using rule 36 (expression -> expression * expression .)
    /               reduce using rule 36 (expression -> expression * expression .)
    <               reduce using rule 36 (expression -> expression * expression .)
    >               reduce using rule 36 (expression -> expression * expression .)
    &               reduce using rule 36 (expression -> expression * expression .)
    |               reduce using rule 36 (expression -> expression * expression .)
    OPAND           reduce using rule 36 (expression -> expression * expression .)
    OPOR            reduce using rule 36 (expression -> expression * expression .)
    EQUAL           reduce using rule 36 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 36 (expression -> expression * expression .)
    GREATEREQUAL    reduce using rule 36 (expression -> expression * expression .)
    LESSEQUAL       reduce using rule 36 (expression -> expression * expression .)
    LEFTSHIFT       reduce using rule 36 (expression -> expression * expression .)
    RIGHTSHIFT      reduce using rule 36 (expression -> expression * expression .)
    ;               reduce using rule 36 (expression -> expression * expression .)
    )               reduce using rule 36 (expression -> expression * expression .)
    ,               reduce using rule 36 (expression -> expression * expression .)

  ! +               [ shift and go to state 68 ]
  ! -               [ shift and go to state 58 ]
  ! *               [ shift and go to state 72 ]
  ! /               [ shift and go to state 70 ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]
  ! LEFTSHIFT       [ shift and go to state 73 ]
  ! RIGHTSHIFT      [ shift and go to state 67 ]


state 107

    (48) expression -> expression LEFTSHIFT expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    >               reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    &               reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    |               reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    OPAND           reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    OPOR            reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    EQUAL           reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    NOTEQUAL        reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    GREATEREQUAL    reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    LESSEQUAL       reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    LEFTSHIFT       reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    RIGHTSHIFT      reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    ;               reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    )               reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    ,               reduce using rule 48 (expression -> expression LEFTSHIFT expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70

  ! +               [ reduce using rule 48 (expression -> expression LEFTSHIFT expression .) ]
  ! -               [ reduce using rule 48 (expression -> expression LEFTSHIFT expression .) ]
  ! *               [ reduce using rule 48 (expression -> expression LEFTSHIFT expression .) ]
  ! /               [ reduce using rule 48 (expression -> expression LEFTSHIFT expression .) ]
  ! <               [ shift and go to state 64 ]
  ! >               [ shift and go to state 59 ]
  ! &               [ shift and go to state 57 ]
  ! |               [ shift and go to state 66 ]
  ! OPAND           [ shift and go to state 61 ]
  ! OPOR            [ shift and go to state 65 ]
  ! EQUAL           [ shift and go to state 71 ]
  ! NOTEQUAL        [ shift and go to state 69 ]
  ! GREATEREQUAL    [ shift and go to state 60 ]
  ! LESSEQUAL       [ shift and go to state 63 ]
  ! LEFTSHIFT       [ shift and go to state 73 ]
  ! RIGHTSHIFT      [ shift and go to state 67 ]


state 108

    (60) func_arg -> ident . = expression

    =               shift and go to state 123


state 109

    (58) func_args -> func_arg .

    )               reduce using rule 58 (func_args -> func_arg .)
    ,               reduce using rule 58 (func_args -> func_arg .)


state 110

    (54) expression -> ident ( func_args . ) MAPSTO type
    (59) func_args -> func_args . , func_arg

    )               shift and go to state 124
    ,               shift and go to state 125


state 111

    (61) expression -> ( expression ) .

    +               reduce using rule 61 (expression -> ( expression ) .)
    -               reduce using rule 61 (expression -> ( expression ) .)
    *               reduce using rule 61 (expression -> ( expression ) .)
    /               reduce using rule 61 (expression -> ( expression ) .)
    <               reduce using rule 61 (expression -> ( expression ) .)
    >               reduce using rule 61 (expression -> ( expression ) .)
    &               reduce using rule 61 (expression -> ( expression ) .)
    |               reduce using rule 61 (expression -> ( expression ) .)
    OPAND           reduce using rule 61 (expression -> ( expression ) .)
    OPOR            reduce using rule 61 (expression -> ( expression ) .)
    EQUAL           reduce using rule 61 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 61 (expression -> ( expression ) .)
    GREATEREQUAL    reduce using rule 61 (expression -> ( expression ) .)
    LESSEQUAL       reduce using rule 61 (expression -> ( expression ) .)
    LEFTSHIFT       reduce using rule 61 (expression -> ( expression ) .)
    RIGHTSHIFT      reduce using rule 61 (expression -> ( expression ) .)
    ;               reduce using rule 61 (expression -> ( expression ) .)
    )               reduce using rule 61 (expression -> ( expression ) .)
    ,               reduce using rule 61 (expression -> ( expression ) .)


state 112

    (25) expression_list -> expression_list , . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    ident                          shift and go to state 40
    constant                       shift and go to state 39
    expression                     shift and go to state 126

state 113

    (21) statement -> ident_list = expression_list ; .

    $end            reduce using rule 21 (statement -> ident_list = expression_list ; .)
    }               reduce using rule 21 (statement -> ident_list = expression_list ; .)
    IF              reduce using rule 21 (statement -> ident_list = expression_list ; .)
    WHILE           reduce using rule 21 (statement -> ident_list = expression_list ; .)
    RETURN          reduce using rule 21 (statement -> ident_list = expression_list ; .)
    ASYNC           reduce using rule 21 (statement -> ident_list = expression_list ; .)
    AWAIT           reduce using rule 21 (statement -> ident_list = expression_list ; .)
    IDENT           reduce using rule 21 (statement -> ident_list = expression_list ; .)
    INT             reduce using rule 21 (statement -> ident_list = expression_list ; .)
    LONG            reduce using rule 21 (statement -> ident_list = expression_list ; .)
    BOOL            reduce using rule 21 (statement -> ident_list = expression_list ; .)
    BITS            reduce using rule 21 (statement -> ident_list = expression_list ; .)
    ELSE            reduce using rule 21 (statement -> ident_list = expression_list ; .)


state 114

    (26) statement -> IF ( expression ) . block
    (27) statement -> IF ( expression ) . block ELSE block
    (13) block -> . { statements }
    (14) block -> . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . ident_list = expression_list ;
    (26) statement -> . IF ( expression ) block
    (27) statement -> . IF ( expression ) block ELSE block
    (28) statement -> . WHILE ( expression ) block
    (29) statement -> . RETURN expression ;
    (50) statement -> . ident PLUSEQUAL expression ;
    (51) statement -> . ident MINUSEQUAL expression ;
    (52) statement -> . ident LEFTSHIFTEQUAL expression ;
    (53) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (55) statement -> . ASYNC ident , ident = ident ( func_args ) MAPSTO type ;
    (56) statement -> . AWAIT expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT
    (22) ident_list -> . ident
    (23) ident_list -> . ident_list , ident

    {               shift and go to state 31
    IF              shift and go to state 27
    WHILE           shift and go to state 23
    RETURN          shift and go to state 28
    ASYNC           shift and go to state 32
    AWAIT           shift and go to state 24
    IDENT           shift and go to state 25
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    block                          shift and go to state 127
    ident                          shift and go to state 29
    ident_list                     shift and go to state 26
    type                           shift and go to state 22
    statement                      shift and go to state 21

state 115

    (20) statement -> ident = expression ; .

    $end            reduce using rule 20 (statement -> ident = expression ; .)
    }               reduce using rule 20 (statement -> ident = expression ; .)
    IF              reduce using rule 20 (statement -> ident = expression ; .)
    WHILE           reduce using rule 20 (statement -> ident = expression ; .)
    RETURN          reduce using rule 20 (statement -> ident = expression ; .)
    ASYNC           reduce using rule 20 (statement -> ident = expression ; .)
    AWAIT           reduce using rule 20 (statement -> ident = expression ; .)
    IDENT           reduce using rule 20 (statement -> ident = expression ; .)
    INT             reduce using rule 20 (statement -> ident = expression ; .)
    LONG            reduce using rule 20 (statement -> ident = expression ; .)
    BOOL            reduce using rule 20 (statement -> ident = expression ; .)
    BITS            reduce using rule 20 (statement -> ident = expression ; .)
    ELSE            reduce using rule 20 (statement -> ident = expression ; .)


state 116

    (52) statement -> ident LEFTSHIFTEQUAL expression ; .

    $end            reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    }               reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    IF              reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    WHILE           reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    RETURN          reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    ASYNC           reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    AWAIT           reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    IDENT           reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    INT             reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    LONG            reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    BOOL            reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    BITS            reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)
    ELSE            reduce using rule 52 (statement -> ident LEFTSHIFTEQUAL expression ; .)


state 117

    (51) statement -> ident MINUSEQUAL expression ; .

    $end            reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    }               reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    IF              reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    WHILE           reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    RETURN          reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    ASYNC           reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    AWAIT           reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    IDENT           reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    INT             reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    LONG            reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    BOOL            reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    BITS            reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)
    ELSE            reduce using rule 51 (statement -> ident MINUSEQUAL expression ; .)


state 118

    (50) statement -> ident PLUSEQUAL expression ; .

    $end            reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    }               reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    IF              reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    WHILE           reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    RETURN          reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    ASYNC           reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    AWAIT           reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    IDENT           reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    INT             reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    LONG            reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    BOOL            reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    BITS            reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)
    ELSE            reduce using rule 50 (statement -> ident PLUSEQUAL expression ; .)


state 119

    (53) statement -> ident RIGHTSHIFTEQUAL expression ; .

    $end            reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    }               reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    IF              reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    WHILE           reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    RETURN          reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    ASYNC           reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    AWAIT           reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    IDENT           reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    INT             reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    LONG            reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    BOOL            reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    BITS            reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)
    ELSE            reduce using rule 53 (statement -> ident RIGHTSHIFTEQUAL expression ; .)


state 120

    (55) statement -> ASYNC ident , ident . = ident ( func_args ) MAPSTO type ;

    =               shift and go to state 128


state 121

    (19) statement -> type ident = expression ; .

    $end            reduce using rule 19 (statement -> type ident = expression ; .)
    }               reduce using rule 19 (statement -> type ident = expression ; .)
    IF              reduce using rule 19 (statement -> type ident = expression ; .)
    WHILE           reduce using rule 19 (statement -> type ident = expression ; .)
    RETURN          reduce using rule 19 (statement -> type ident = expression ; .)
    ASYNC           reduce using rule 19 (statement -> type ident = expression ; .)
    AWAIT           reduce using rule 19 (statement -> type ident = expression ; .)
    IDENT           reduce using rule 19 (statement -> type ident = expression ; .)
    INT             reduce using rule 19 (statement -> type ident = expression ; .)
    LONG            reduce using rule 19 (statement -> type ident = expression ; .)
    BOOL            reduce using rule 19 (statement -> type ident = expression ; .)
    BITS            reduce using rule 19 (statement -> type ident = expression ; .)
    ELSE            reduce using rule 19 (statement -> type ident = expression ; .)


state 122

    (28) statement -> WHILE ( expression ) block .

    $end            reduce using rule 28 (statement -> WHILE ( expression ) block .)
    }               reduce using rule 28 (statement -> WHILE ( expression ) block .)
    IF              reduce using rule 28 (statement -> WHILE ( expression ) block .)
    WHILE           reduce using rule 28 (statement -> WHILE ( expression ) block .)
    RETURN          reduce using rule 28 (statement -> WHILE ( expression ) block .)
    ASYNC           reduce using rule 28 (statement -> WHILE ( expression ) block .)
    AWAIT           reduce using rule 28 (statement -> WHILE ( expression ) block .)
    IDENT           reduce using rule 28 (statement -> WHILE ( expression ) block .)
    INT             reduce using rule 28 (statement -> WHILE ( expression ) block .)
    LONG            reduce using rule 28 (statement -> WHILE ( expression ) block .)
    BOOL            reduce using rule 28 (statement -> WHILE ( expression ) block .)
    BITS            reduce using rule 28 (statement -> WHILE ( expression ) block .)
    ELSE            reduce using rule 28 (statement -> WHILE ( expression ) block .)


state 123

    (60) func_arg -> ident = . expression
    (30) expression -> . ident
    (31) expression -> . constant
    (33) expression -> . ! expression
    (34) expression -> . expression + expression
    (35) expression -> . expression - expression
    (36) expression -> . expression * expression
    (37) expression -> . expression / expression
    (38) expression -> . expression < expression
    (39) expression -> . expression > expression
    (40) expression -> . expression & expression
    (41) expression -> . expression | expression
    (42) expression -> . expression OPAND expression
    (43) expression -> . expression OPOR expression
    (44) expression -> . expression EQUAL expression
    (45) expression -> . expression NOTEQUAL expression
    (46) expression -> . expression GREATEREQUAL expression
    (47) expression -> . expression LESSEQUAL expression
    (48) expression -> . expression LEFTSHIFT expression
    (49) expression -> . expression RIGHTSHIFT expression
    (54) expression -> . ident ( func_args ) MAPSTO type
    (61) expression -> . ( expression )
    (8) ident -> . IDENT
    (32) constant -> . DIGITS

    !               shift and go to state 37
    (               shift and go to state 41
    IDENT           shift and go to state 10
    DIGITS          shift and go to state 38

    constant                       shift and go to state 39
    ident                          shift and go to state 40
    expression                     shift and go to state 129

state 124

    (54) expression -> ident ( func_args ) . MAPSTO type

    MAPSTO          shift and go to state 130


state 125

    (59) func_args -> func_args , . func_arg
    (60) func_arg -> . ident = expression
    (8) ident -> . IDENT

    IDENT           shift and go to state 10

    ident                          shift and go to state 108
    func_arg                       shift and go to state 131

state 126

    (25) expression_list -> expression_list , expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    ;               reduce using rule 25 (expression_list -> expression_list , expression .)
    ,               reduce using rule 25 (expression_list -> expression_list , expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 127

    (26) statement -> IF ( expression ) block .
    (27) statement -> IF ( expression ) block . ELSE block

  ! shift/reduce conflict for ELSE resolved as shift
    $end            reduce using rule 26 (statement -> IF ( expression ) block .)
    }               reduce using rule 26 (statement -> IF ( expression ) block .)
    IF              reduce using rule 26 (statement -> IF ( expression ) block .)
    WHILE           reduce using rule 26 (statement -> IF ( expression ) block .)
    RETURN          reduce using rule 26 (statement -> IF ( expression ) block .)
    ASYNC           reduce using rule 26 (statement -> IF ( expression ) block .)
    AWAIT           reduce using rule 26 (statement -> IF ( expression ) block .)
    IDENT           reduce using rule 26 (statement -> IF ( expression ) block .)
    INT             reduce using rule 26 (statement -> IF ( expression ) block .)
    LONG            reduce using rule 26 (statement -> IF ( expression ) block .)
    BOOL            reduce using rule 26 (statement -> IF ( expression ) block .)
    BITS            reduce using rule 26 (statement -> IF ( expression ) block .)
    ELSE            shift and go to state 132

  ! ELSE            [ reduce using rule 26 (statement -> IF ( expression ) block .) ]


state 128

    (55) statement -> ASYNC ident , ident = . ident ( func_args ) MAPSTO type ;
    (8) ident -> . IDENT

    IDENT           shift and go to state 10

    ident                          shift and go to state 133

state 129

    (60) func_arg -> ident = expression .
    (34) expression -> expression . + expression
    (35) expression -> expression . - expression
    (36) expression -> expression . * expression
    (37) expression -> expression . / expression
    (38) expression -> expression . < expression
    (39) expression -> expression . > expression
    (40) expression -> expression . & expression
    (41) expression -> expression . | expression
    (42) expression -> expression . OPAND expression
    (43) expression -> expression . OPOR expression
    (44) expression -> expression . EQUAL expression
    (45) expression -> expression . NOTEQUAL expression
    (46) expression -> expression . GREATEREQUAL expression
    (47) expression -> expression . LESSEQUAL expression
    (48) expression -> expression . LEFTSHIFT expression
    (49) expression -> expression . RIGHTSHIFT expression

    )               reduce using rule 60 (func_arg -> ident = expression .)
    ,               reduce using rule 60 (func_arg -> ident = expression .)
    +               shift and go to state 68
    -               shift and go to state 58
    *               shift and go to state 72
    /               shift and go to state 70
    <               shift and go to state 64
    >               shift and go to state 59
    &               shift and go to state 57
    |               shift and go to state 66
    OPAND           shift and go to state 61
    OPOR            shift and go to state 65
    EQUAL           shift and go to state 71
    NOTEQUAL        shift and go to state 69
    GREATEREQUAL    shift and go to state 60
    LESSEQUAL       shift and go to state 63
    LEFTSHIFT       shift and go to state 73
    RIGHTSHIFT      shift and go to state 67


state 130

    (54) expression -> ident ( func_args ) MAPSTO . type
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    IDENT           shift and go to state 7
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    type                           shift and go to state 134

state 131

    (59) func_args -> func_args , func_arg .

    )               reduce using rule 59 (func_args -> func_args , func_arg .)
    ,               reduce using rule 59 (func_args -> func_args , func_arg .)


state 132

    (27) statement -> IF ( expression ) block ELSE . block
    (13) block -> . { statements }
    (14) block -> . statement
    (18) statement -> . type ident ;
    (19) statement -> . type ident = expression ;
    (20) statement -> . ident = expression ;
    (21) statement -> . ident_list = expression_list ;
    (26) statement -> . IF ( expression ) block
    (27) statement -> . IF ( expression ) block ELSE block
    (28) statement -> . WHILE ( expression ) block
    (29) statement -> . RETURN expression ;
    (50) statement -> . ident PLUSEQUAL expression ;
    (51) statement -> . ident MINUSEQUAL expression ;
    (52) statement -> . ident LEFTSHIFTEQUAL expression ;
    (53) statement -> . ident RIGHTSHIFTEQUAL expression ;
    (55) statement -> . ASYNC ident , ident = ident ( func_args ) MAPSTO type ;
    (56) statement -> . AWAIT expression ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]
    (8) ident -> . IDENT
    (22) ident_list -> . ident
    (23) ident_list -> . ident_list , ident

    {               shift and go to state 31
    IF              shift and go to state 27
    WHILE           shift and go to state 23
    RETURN          shift and go to state 28
    ASYNC           shift and go to state 32
    AWAIT           shift and go to state 24
    IDENT           shift and go to state 25
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    block                          shift and go to state 135
    ident                          shift and go to state 29
    ident_list                     shift and go to state 26
    type                           shift and go to state 22
    statement                      shift and go to state 21

state 133

    (55) statement -> ASYNC ident , ident = ident . ( func_args ) MAPSTO type ;

    (               shift and go to state 136


state 134

    (54) expression -> ident ( func_args ) MAPSTO type .

    +               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    -               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    *               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    /               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    <               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    >               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    &               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    |               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    OPAND           reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    OPOR            reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    EQUAL           reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    NOTEQUAL        reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    GREATEREQUAL    reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    LESSEQUAL       reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    LEFTSHIFT       reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    RIGHTSHIFT      reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    ;               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    )               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)
    ,               reduce using rule 54 (expression -> ident ( func_args ) MAPSTO type .)


state 135

    (27) statement -> IF ( expression ) block ELSE block .

    $end            reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    }               reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    IF              reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    WHILE           reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    RETURN          reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    ASYNC           reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    AWAIT           reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    IDENT           reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    INT             reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    LONG            reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    BOOL            reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    BITS            reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)
    ELSE            reduce using rule 27 (statement -> IF ( expression ) block ELSE block .)


state 136

    (55) statement -> ASYNC ident , ident = ident ( . func_args ) MAPSTO type ;
    (57) func_args -> .
    (58) func_args -> . func_arg
    (59) func_args -> . func_args , func_arg
    (60) func_arg -> . ident = expression
    (8) ident -> . IDENT

    )               reduce using rule 57 (func_args -> .)
    ,               reduce using rule 57 (func_args -> .)
    IDENT           shift and go to state 10

    func_arg                       shift and go to state 109
    ident                          shift and go to state 108
    func_args                      shift and go to state 137

state 137

    (55) statement -> ASYNC ident , ident = ident ( func_args . ) MAPSTO type ;
    (59) func_args -> func_args . , func_arg

    )               shift and go to state 138
    ,               shift and go to state 125


state 138

    (55) statement -> ASYNC ident , ident = ident ( func_args ) . MAPSTO type ;

    MAPSTO          shift and go to state 139


state 139

    (55) statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO . type ;
    (3) type -> . IDENT
    (4) type -> . INT
    (5) type -> . LONG
    (6) type -> . BOOL
    (7) type -> . BITS [ DIGITS ]

    IDENT           shift and go to state 7
    INT             shift and go to state 5
    LONG            shift and go to state 8
    BOOL            shift and go to state 3
    BITS            shift and go to state 1

    type                           shift and go to state 140

state 140

    (55) statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type . ;

    ;               shift and go to state 141


state 141

    (55) statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .

    $end            reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    }               reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    IF              reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    WHILE           reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    RETURN          reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    ASYNC           reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    AWAIT           reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    IDENT           reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    INT             reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    LONG            reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    BOOL            reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    BITS            reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)
    ELSE            reduce using rule 55 (statement -> ASYNC ident , ident = ident ( func_args ) MAPSTO type ; .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for = in state 29 resolved as shift
WARNING: shift/reduce conflict for IF in state 31 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 31 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 31 resolved as shift
WARNING: shift/reduce conflict for ASYNC in state 31 resolved as shift
WARNING: shift/reduce conflict for AWAIT in state 31 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 31 resolved as shift
WARNING: shift/reduce conflict for INT in state 31 resolved as shift
WARNING: shift/reduce conflict for LONG in state 31 resolved as shift
WARNING: shift/reduce conflict for BOOL in state 31 resolved as shift
WARNING: shift/reduce conflict for BITS in state 31 resolved as shift
WARNING: shift/reduce conflict for + in state 74 resolved as shift
WARNING: shift/reduce conflict for - in state 74 resolved as shift
WARNING: shift/reduce conflict for * in state 74 resolved as shift
WARNING: shift/reduce conflict for / in state 74 resolved as shift
WARNING: shift/reduce conflict for < in state 74 resolved as shift
WARNING: shift/reduce conflict for > in state 74 resolved as shift
WARNING: shift/reduce conflict for & in state 74 resolved as shift
WARNING: shift/reduce conflict for | in state 74 resolved as shift
WARNING: shift/reduce conflict for OPAND in state 74 resolved as shift
WARNING: shift/reduce conflict for OPOR in state 74 resolved as shift
WARNING: shift/reduce conflict for EQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for NOTEQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for GREATEREQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for LESSEQUAL in state 74 resolved as shift
WARNING: shift/reduce conflict for LEFTSHIFT in state 74 resolved as shift
WARNING: shift/reduce conflict for RIGHTSHIFT in state 74 resolved as shift
WARNING: shift/reduce conflict for ELSE in state 127 resolved as shift
