Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> func_decl
Rule 2     func_decl -> type ident ( func_decl_args ) block
Rule 3     type -> IDENT
Rule 4     ident -> IDENT
Rule 5     func_decl_args -> <empty>
Rule 6     func_decl_args -> func_decl_arg
Rule 7     func_decl_args -> func_decl_args , func_decl_arg
Rule 8     func_decl_arg -> type ident
Rule 9     block -> { statements }
Rule 10    statements -> <empty>
Rule 11    statements -> statement
Rule 12    statements -> statements statement
Rule 13    statement -> type ident ;
Rule 14    statement -> ident = expression ;
Rule 15    statement -> IF ( expression ) block
Rule 16    statement -> WHILE ( expression ) block
Rule 17    statement -> RETURN expression ;
Rule 18    expression -> ident
Rule 19    expression -> constant
Rule 20    constant -> DIGITS
Rule 21    expression -> expression + expression
Rule 22    expression -> expression - expression
Rule 23    expression -> expression * expression
Rule 24    expression -> expression / expression
Rule 25    expression -> expression < expression
Rule 26    expression -> expression > expression
Rule 27    expression -> expression & expression
Rule 28    expression -> expression | expression
Rule 29    expression -> expression EQUAL expression
Rule 30    expression -> expression NOTEQUAL expression
Rule 31    expression -> expression GREATEREQUAL expression
Rule 32    expression -> expression LESSEQUAL expression
Rule 33    expression -> expression LEFTSHIFT expression
Rule 34    expression -> expression RIGHTSHIFT expression
Rule 35    statement -> ident = function_call ;
Rule 36    function_call -> ident ( func_args )
Rule 37    func_args -> <empty>
Rule 38    func_args -> func_arg
Rule 39    func_args -> func_args , func_arg
Rule 40    func_arg -> ident = ident
Rule 41    expression -> ( expression )

Terminals, with rules where they appear

&                    : 27
(                    : 2 15 16 36 41
)                    : 2 15 16 36 41
*                    : 23
+                    : 21
,                    : 7 39
-                    : 22
/                    : 24
;                    : 13 14 17 35
<                    : 25
=                    : 14 35 40
>                    : 26
DIGITS               : 20
EQUAL                : 29
GREATEREQUAL         : 31
IDENT                : 3 4
IF                   : 15
LEFTSHIFT            : 33
LESSEQUAL            : 32
NOTEQUAL             : 30
RETURN               : 17
RIGHTSHIFT           : 34
WHILE                : 16
error                : 
{                    : 9
|                    : 28
}                    : 9

Nonterminals, with rules where they appear

block                : 2 15 16
constant             : 19
expression           : 14 15 16 17 21 21 22 22 23 23 24 24 25 25 26 26 27 27 28 28 29 29 30 30 31 31 32 32 33 33 34 34 41
func_arg             : 38 39
func_args            : 36 39
func_decl            : 1
func_decl_arg        : 6 7
func_decl_args       : 2 7
function_call        : 35
ident                : 2 8 13 14 18 35 36 40 40
program              : 0
statement            : 11 12
statements           : 9 12
type                 : 2 8 13

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . func_decl
    (2) func_decl -> . type ident ( func_decl_args ) block
    (3) type -> . IDENT

    IDENT           shift and go to state 4

    type                           shift and go to state 1
    program                        shift and go to state 2
    func_decl                      shift and go to state 3

state 1

    (2) func_decl -> type . ident ( func_decl_args ) block
    (4) ident -> . IDENT

    IDENT           shift and go to state 5

    ident                          shift and go to state 6

state 2

    (0) S' -> program .



state 3

    (1) program -> func_decl .

    $end            reduce using rule 1 (program -> func_decl .)


state 4

    (3) type -> IDENT .

    IDENT           reduce using rule 3 (type -> IDENT .)


state 5

    (4) ident -> IDENT .

    +               reduce using rule 4 (ident -> IDENT .)
    -               reduce using rule 4 (ident -> IDENT .)
    *               reduce using rule 4 (ident -> IDENT .)
    /               reduce using rule 4 (ident -> IDENT .)
    <               reduce using rule 4 (ident -> IDENT .)
    >               reduce using rule 4 (ident -> IDENT .)
    &               reduce using rule 4 (ident -> IDENT .)
    |               reduce using rule 4 (ident -> IDENT .)
    EQUAL           reduce using rule 4 (ident -> IDENT .)
    NOTEQUAL        reduce using rule 4 (ident -> IDENT .)
    GREATEREQUAL    reduce using rule 4 (ident -> IDENT .)
    LESSEQUAL       reduce using rule 4 (ident -> IDENT .)
    LEFTSHIFT       reduce using rule 4 (ident -> IDENT .)
    RIGHTSHIFT      reduce using rule 4 (ident -> IDENT .)
    ;               reduce using rule 4 (ident -> IDENT .)
    )               reduce using rule 4 (ident -> IDENT .)
    (               reduce using rule 4 (ident -> IDENT .)
    =               reduce using rule 4 (ident -> IDENT .)
    ,               reduce using rule 4 (ident -> IDENT .)


state 6

    (2) func_decl -> type ident . ( func_decl_args ) block

    (               shift and go to state 7


state 7

    (2) func_decl -> type ident ( . func_decl_args ) block
    (5) func_decl_args -> .
    (6) func_decl_args -> . func_decl_arg
    (7) func_decl_args -> . func_decl_args , func_decl_arg
    (8) func_decl_arg -> . type ident
    (3) type -> . IDENT

    )               reduce using rule 5 (func_decl_args -> .)
    ,               reduce using rule 5 (func_decl_args -> .)
    IDENT           shift and go to state 4

    func_decl_arg                  shift and go to state 8
    type                           shift and go to state 9
    func_decl_args                 shift and go to state 10

state 8

    (6) func_decl_args -> func_decl_arg .

    )               reduce using rule 6 (func_decl_args -> func_decl_arg .)
    ,               reduce using rule 6 (func_decl_args -> func_decl_arg .)


state 9

    (8) func_decl_arg -> type . ident
    (4) ident -> . IDENT

    IDENT           shift and go to state 5

    ident                          shift and go to state 11

state 10

    (2) func_decl -> type ident ( func_decl_args . ) block
    (7) func_decl_args -> func_decl_args . , func_decl_arg

    )               shift and go to state 12
    ,               shift and go to state 13


state 11

    (8) func_decl_arg -> type ident .

    )               reduce using rule 8 (func_decl_arg -> type ident .)
    ,               reduce using rule 8 (func_decl_arg -> type ident .)


state 12

    (2) func_decl -> type ident ( func_decl_args ) . block
    (9) block -> . { statements }

    {               shift and go to state 15

    block                          shift and go to state 14

state 13

    (7) func_decl_args -> func_decl_args , . func_decl_arg
    (8) func_decl_arg -> . type ident
    (3) type -> . IDENT

    IDENT           shift and go to state 4

    func_decl_arg                  shift and go to state 16
    type                           shift and go to state 9

state 14

    (2) func_decl -> type ident ( func_decl_args ) block .

    $end            reduce using rule 2 (func_decl -> type ident ( func_decl_args ) block .)


state 15

    (9) block -> { . statements }
    (10) statements -> .
    (11) statements -> . statement
    (12) statements -> . statements statement
    (13) statement -> . type ident ;
    (14) statement -> . ident = expression ;
    (15) statement -> . IF ( expression ) block
    (16) statement -> . WHILE ( expression ) block
    (17) statement -> . RETURN expression ;
    (35) statement -> . ident = function_call ;
    (3) type -> . IDENT
    (4) ident -> . IDENT

  ! shift/reduce conflict for IF resolved as shift
  ! shift/reduce conflict for WHILE resolved as shift
  ! shift/reduce conflict for RETURN resolved as shift
  ! shift/reduce conflict for IDENT resolved as shift
    }               reduce using rule 10 (statements -> .)
    IF              shift and go to state 17
    WHILE           shift and go to state 19
    RETURN          shift and go to state 22
    IDENT           shift and go to state 24

  ! IF              [ reduce using rule 10 (statements -> .) ]
  ! WHILE           [ reduce using rule 10 (statements -> .) ]
  ! RETURN          [ reduce using rule 10 (statements -> .) ]
  ! IDENT           [ reduce using rule 10 (statements -> .) ]

    type                           shift and go to state 20
    statements                     shift and go to state 18
    statement                      shift and go to state 23
    ident                          shift and go to state 21

state 16

    (7) func_decl_args -> func_decl_args , func_decl_arg .

    )               reduce using rule 7 (func_decl_args -> func_decl_args , func_decl_arg .)
    ,               reduce using rule 7 (func_decl_args -> func_decl_args , func_decl_arg .)


state 17

    (15) statement -> IF . ( expression ) block

    (               shift and go to state 25


state 18

    (9) block -> { statements . }
    (12) statements -> statements . statement
    (13) statement -> . type ident ;
    (14) statement -> . ident = expression ;
    (15) statement -> . IF ( expression ) block
    (16) statement -> . WHILE ( expression ) block
    (17) statement -> . RETURN expression ;
    (35) statement -> . ident = function_call ;
    (3) type -> . IDENT
    (4) ident -> . IDENT

    }               shift and go to state 26
    IF              shift and go to state 17
    WHILE           shift and go to state 19
    RETURN          shift and go to state 22
    IDENT           shift and go to state 24

    type                           shift and go to state 20
    statement                      shift and go to state 27
    ident                          shift and go to state 21

state 19

    (16) statement -> WHILE . ( expression ) block

    (               shift and go to state 28


state 20

    (13) statement -> type . ident ;
    (4) ident -> . IDENT

    IDENT           shift and go to state 5

    ident                          shift and go to state 29

state 21

    (14) statement -> ident . = expression ;
    (35) statement -> ident . = function_call ;

    =               shift and go to state 30


state 22

    (17) statement -> RETURN . expression ;
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 35
    ident                          shift and go to state 31

state 23

    (11) statements -> statement .

    }               reduce using rule 11 (statements -> statement .)
    IF              reduce using rule 11 (statements -> statement .)
    WHILE           reduce using rule 11 (statements -> statement .)
    RETURN          reduce using rule 11 (statements -> statement .)
    IDENT           reduce using rule 11 (statements -> statement .)


state 24

    (3) type -> IDENT .
    (4) ident -> IDENT .

    IDENT           reduce using rule 3 (type -> IDENT .)
    =               reduce using rule 4 (ident -> IDENT .)


state 25

    (15) statement -> IF ( . expression ) block
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    ident                          shift and go to state 31
    expression                     shift and go to state 36

state 26

    (9) block -> { statements } .

    }               reduce using rule 9 (block -> { statements } .)
    IF              reduce using rule 9 (block -> { statements } .)
    WHILE           reduce using rule 9 (block -> { statements } .)
    RETURN          reduce using rule 9 (block -> { statements } .)
    IDENT           reduce using rule 9 (block -> { statements } .)
    $end            reduce using rule 9 (block -> { statements } .)


state 27

    (12) statements -> statements statement .

    }               reduce using rule 12 (statements -> statements statement .)
    IF              reduce using rule 12 (statements -> statements statement .)
    WHILE           reduce using rule 12 (statements -> statements statement .)
    RETURN          reduce using rule 12 (statements -> statements statement .)
    IDENT           reduce using rule 12 (statements -> statements statement .)


state 28

    (16) statement -> WHILE ( . expression ) block
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    ident                          shift and go to state 31
    expression                     shift and go to state 37

state 29

    (13) statement -> type ident . ;

    ;               shift and go to state 38


state 30

    (14) statement -> ident = . expression ;
    (35) statement -> ident = . function_call ;
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (36) function_call -> . ident ( func_args )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 41
    function_call                  shift and go to state 40
    ident                          shift and go to state 39

state 31

    (18) expression -> ident .

    +               reduce using rule 18 (expression -> ident .)
    -               reduce using rule 18 (expression -> ident .)
    *               reduce using rule 18 (expression -> ident .)
    /               reduce using rule 18 (expression -> ident .)
    <               reduce using rule 18 (expression -> ident .)
    >               reduce using rule 18 (expression -> ident .)
    &               reduce using rule 18 (expression -> ident .)
    |               reduce using rule 18 (expression -> ident .)
    EQUAL           reduce using rule 18 (expression -> ident .)
    NOTEQUAL        reduce using rule 18 (expression -> ident .)
    GREATEREQUAL    reduce using rule 18 (expression -> ident .)
    LESSEQUAL       reduce using rule 18 (expression -> ident .)
    LEFTSHIFT       reduce using rule 18 (expression -> ident .)
    RIGHTSHIFT      reduce using rule 18 (expression -> ident .)
    ;               reduce using rule 18 (expression -> ident .)
    )               reduce using rule 18 (expression -> ident .)


state 32

    (19) expression -> constant .

    +               reduce using rule 19 (expression -> constant .)
    -               reduce using rule 19 (expression -> constant .)
    *               reduce using rule 19 (expression -> constant .)
    /               reduce using rule 19 (expression -> constant .)
    <               reduce using rule 19 (expression -> constant .)
    >               reduce using rule 19 (expression -> constant .)
    &               reduce using rule 19 (expression -> constant .)
    |               reduce using rule 19 (expression -> constant .)
    EQUAL           reduce using rule 19 (expression -> constant .)
    NOTEQUAL        reduce using rule 19 (expression -> constant .)
    GREATEREQUAL    reduce using rule 19 (expression -> constant .)
    LESSEQUAL       reduce using rule 19 (expression -> constant .)
    LEFTSHIFT       reduce using rule 19 (expression -> constant .)
    RIGHTSHIFT      reduce using rule 19 (expression -> constant .)
    ;               reduce using rule 19 (expression -> constant .)
    )               reduce using rule 19 (expression -> constant .)


state 33

    (41) expression -> ( . expression )
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 42
    ident                          shift and go to state 31

state 34

    (20) constant -> DIGITS .

    +               reduce using rule 20 (constant -> DIGITS .)
    -               reduce using rule 20 (constant -> DIGITS .)
    *               reduce using rule 20 (constant -> DIGITS .)
    /               reduce using rule 20 (constant -> DIGITS .)
    <               reduce using rule 20 (constant -> DIGITS .)
    >               reduce using rule 20 (constant -> DIGITS .)
    &               reduce using rule 20 (constant -> DIGITS .)
    |               reduce using rule 20 (constant -> DIGITS .)
    EQUAL           reduce using rule 20 (constant -> DIGITS .)
    NOTEQUAL        reduce using rule 20 (constant -> DIGITS .)
    GREATEREQUAL    reduce using rule 20 (constant -> DIGITS .)
    LESSEQUAL       reduce using rule 20 (constant -> DIGITS .)
    LEFTSHIFT       reduce using rule 20 (constant -> DIGITS .)
    RIGHTSHIFT      reduce using rule 20 (constant -> DIGITS .)
    ;               reduce using rule 20 (constant -> DIGITS .)
    )               reduce using rule 20 (constant -> DIGITS .)


state 35

    (17) statement -> RETURN expression . ;
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 52
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    <               shift and go to state 51
    >               shift and go to state 50
    &               shift and go to state 47
    |               shift and go to state 46
    EQUAL           shift and go to state 49
    NOTEQUAL        shift and go to state 54
    GREATEREQUAL    shift and go to state 57
    LESSEQUAL       shift and go to state 55
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48


state 36

    (15) statement -> IF ( expression . ) block
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 58
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    <               shift and go to state 51
    >               shift and go to state 50
    &               shift and go to state 47
    |               shift and go to state 46
    EQUAL           shift and go to state 49
    NOTEQUAL        shift and go to state 54
    GREATEREQUAL    shift and go to state 57
    LESSEQUAL       shift and go to state 55
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48


state 37

    (16) statement -> WHILE ( expression . ) block
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 59
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    <               shift and go to state 51
    >               shift and go to state 50
    &               shift and go to state 47
    |               shift and go to state 46
    EQUAL           shift and go to state 49
    NOTEQUAL        shift and go to state 54
    GREATEREQUAL    shift and go to state 57
    LESSEQUAL       shift and go to state 55
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48


state 38

    (13) statement -> type ident ; .

    }               reduce using rule 13 (statement -> type ident ; .)
    IF              reduce using rule 13 (statement -> type ident ; .)
    WHILE           reduce using rule 13 (statement -> type ident ; .)
    RETURN          reduce using rule 13 (statement -> type ident ; .)
    IDENT           reduce using rule 13 (statement -> type ident ; .)


state 39

    (18) expression -> ident .
    (36) function_call -> ident . ( func_args )

    ;               reduce using rule 18 (expression -> ident .)
    +               reduce using rule 18 (expression -> ident .)
    -               reduce using rule 18 (expression -> ident .)
    *               reduce using rule 18 (expression -> ident .)
    /               reduce using rule 18 (expression -> ident .)
    <               reduce using rule 18 (expression -> ident .)
    >               reduce using rule 18 (expression -> ident .)
    &               reduce using rule 18 (expression -> ident .)
    |               reduce using rule 18 (expression -> ident .)
    EQUAL           reduce using rule 18 (expression -> ident .)
    NOTEQUAL        reduce using rule 18 (expression -> ident .)
    GREATEREQUAL    reduce using rule 18 (expression -> ident .)
    LESSEQUAL       reduce using rule 18 (expression -> ident .)
    LEFTSHIFT       reduce using rule 18 (expression -> ident .)
    RIGHTSHIFT      reduce using rule 18 (expression -> ident .)
    (               shift and go to state 60


state 40

    (35) statement -> ident = function_call . ;

    ;               shift and go to state 61


state 41

    (14) statement -> ident = expression . ;
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    ;               shift and go to state 62
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    <               shift and go to state 51
    >               shift and go to state 50
    &               shift and go to state 47
    |               shift and go to state 46
    EQUAL           shift and go to state 49
    NOTEQUAL        shift and go to state 54
    GREATEREQUAL    shift and go to state 57
    LESSEQUAL       shift and go to state 55
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48


state 42

    (41) expression -> ( expression . )
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    )               shift and go to state 63
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    <               shift and go to state 51
    >               shift and go to state 50
    &               shift and go to state 47
    |               shift and go to state 46
    EQUAL           shift and go to state 49
    NOTEQUAL        shift and go to state 54
    GREATEREQUAL    shift and go to state 57
    LESSEQUAL       shift and go to state 55
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48


state 43

    (33) expression -> expression LEFTSHIFT . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 64
    ident                          shift and go to state 31

state 44

    (22) expression -> expression - . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 65
    ident                          shift and go to state 31

state 45

    (23) expression -> expression * . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 66
    ident                          shift and go to state 31

state 46

    (28) expression -> expression | . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 67
    ident                          shift and go to state 31

state 47

    (27) expression -> expression & . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 68
    ident                          shift and go to state 31

state 48

    (34) expression -> expression RIGHTSHIFT . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 69
    ident                          shift and go to state 31

state 49

    (29) expression -> expression EQUAL . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 70
    ident                          shift and go to state 31

state 50

    (26) expression -> expression > . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 71
    ident                          shift and go to state 31

state 51

    (25) expression -> expression < . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 72
    ident                          shift and go to state 31

state 52

    (17) statement -> RETURN expression ; .

    }               reduce using rule 17 (statement -> RETURN expression ; .)
    IF              reduce using rule 17 (statement -> RETURN expression ; .)
    WHILE           reduce using rule 17 (statement -> RETURN expression ; .)
    RETURN          reduce using rule 17 (statement -> RETURN expression ; .)
    IDENT           reduce using rule 17 (statement -> RETURN expression ; .)


state 53

    (21) expression -> expression + . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 73
    ident                          shift and go to state 31

state 54

    (30) expression -> expression NOTEQUAL . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 74
    ident                          shift and go to state 31

state 55

    (32) expression -> expression LESSEQUAL . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 75
    ident                          shift and go to state 31

state 56

    (24) expression -> expression / . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 76
    ident                          shift and go to state 31

state 57

    (31) expression -> expression GREATEREQUAL . expression
    (18) expression -> . ident
    (19) expression -> . constant
    (21) expression -> . expression + expression
    (22) expression -> . expression - expression
    (23) expression -> . expression * expression
    (24) expression -> . expression / expression
    (25) expression -> . expression < expression
    (26) expression -> . expression > expression
    (27) expression -> . expression & expression
    (28) expression -> . expression | expression
    (29) expression -> . expression EQUAL expression
    (30) expression -> . expression NOTEQUAL expression
    (31) expression -> . expression GREATEREQUAL expression
    (32) expression -> . expression LESSEQUAL expression
    (33) expression -> . expression LEFTSHIFT expression
    (34) expression -> . expression RIGHTSHIFT expression
    (41) expression -> . ( expression )
    (4) ident -> . IDENT
    (20) constant -> . DIGITS

    (               shift and go to state 33
    IDENT           shift and go to state 5
    DIGITS          shift and go to state 34

    constant                       shift and go to state 32
    expression                     shift and go to state 77
    ident                          shift and go to state 31

state 58

    (15) statement -> IF ( expression ) . block
    (9) block -> . { statements }

    {               shift and go to state 15

    block                          shift and go to state 78

state 59

    (16) statement -> WHILE ( expression ) . block
    (9) block -> . { statements }

    {               shift and go to state 15

    block                          shift and go to state 79

state 60

    (36) function_call -> ident ( . func_args )
    (37) func_args -> .
    (38) func_args -> . func_arg
    (39) func_args -> . func_args , func_arg
    (40) func_arg -> . ident = ident
    (4) ident -> . IDENT

    )               reduce using rule 37 (func_args -> .)
    ,               reduce using rule 37 (func_args -> .)
    IDENT           shift and go to state 5

    func_args                      shift and go to state 81
    func_arg                       shift and go to state 80
    ident                          shift and go to state 82

state 61

    (35) statement -> ident = function_call ; .

    }               reduce using rule 35 (statement -> ident = function_call ; .)
    IF              reduce using rule 35 (statement -> ident = function_call ; .)
    WHILE           reduce using rule 35 (statement -> ident = function_call ; .)
    RETURN          reduce using rule 35 (statement -> ident = function_call ; .)
    IDENT           reduce using rule 35 (statement -> ident = function_call ; .)


state 62

    (14) statement -> ident = expression ; .

    }               reduce using rule 14 (statement -> ident = expression ; .)
    IF              reduce using rule 14 (statement -> ident = expression ; .)
    WHILE           reduce using rule 14 (statement -> ident = expression ; .)
    RETURN          reduce using rule 14 (statement -> ident = expression ; .)
    IDENT           reduce using rule 14 (statement -> ident = expression ; .)


state 63

    (41) expression -> ( expression ) .

    +               reduce using rule 41 (expression -> ( expression ) .)
    -               reduce using rule 41 (expression -> ( expression ) .)
    *               reduce using rule 41 (expression -> ( expression ) .)
    /               reduce using rule 41 (expression -> ( expression ) .)
    <               reduce using rule 41 (expression -> ( expression ) .)
    >               reduce using rule 41 (expression -> ( expression ) .)
    &               reduce using rule 41 (expression -> ( expression ) .)
    |               reduce using rule 41 (expression -> ( expression ) .)
    EQUAL           reduce using rule 41 (expression -> ( expression ) .)
    NOTEQUAL        reduce using rule 41 (expression -> ( expression ) .)
    GREATEREQUAL    reduce using rule 41 (expression -> ( expression ) .)
    LESSEQUAL       reduce using rule 41 (expression -> ( expression ) .)
    LEFTSHIFT       reduce using rule 41 (expression -> ( expression ) .)
    RIGHTSHIFT      reduce using rule 41 (expression -> ( expression ) .)
    ;               reduce using rule 41 (expression -> ( expression ) .)
    )               reduce using rule 41 (expression -> ( expression ) .)


state 64

    (33) expression -> expression LEFTSHIFT expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    >               reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    &               reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    |               reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    EQUAL           reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    NOTEQUAL        reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    GREATEREQUAL    reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    LESSEQUAL       reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    LEFTSHIFT       reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    RIGHTSHIFT      reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    ;               reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    )               reduce using rule 33 (expression -> expression LEFTSHIFT expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56

  ! +               [ reduce using rule 33 (expression -> expression LEFTSHIFT expression .) ]
  ! -               [ reduce using rule 33 (expression -> expression LEFTSHIFT expression .) ]
  ! *               [ reduce using rule 33 (expression -> expression LEFTSHIFT expression .) ]
  ! /               [ reduce using rule 33 (expression -> expression LEFTSHIFT expression .) ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]
  ! LEFTSHIFT       [ shift and go to state 43 ]
  ! RIGHTSHIFT      [ shift and go to state 48 ]


state 65

    (22) expression -> expression - expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    +               reduce using rule 22 (expression -> expression - expression .)
    -               reduce using rule 22 (expression -> expression - expression .)
    <               reduce using rule 22 (expression -> expression - expression .)
    >               reduce using rule 22 (expression -> expression - expression .)
    &               reduce using rule 22 (expression -> expression - expression .)
    |               reduce using rule 22 (expression -> expression - expression .)
    EQUAL           reduce using rule 22 (expression -> expression - expression .)
    NOTEQUAL        reduce using rule 22 (expression -> expression - expression .)
    GREATEREQUAL    reduce using rule 22 (expression -> expression - expression .)
    LESSEQUAL       reduce using rule 22 (expression -> expression - expression .)
    LEFTSHIFT       reduce using rule 22 (expression -> expression - expression .)
    RIGHTSHIFT      reduce using rule 22 (expression -> expression - expression .)
    ;               reduce using rule 22 (expression -> expression - expression .)
    )               reduce using rule 22 (expression -> expression - expression .)
    *               shift and go to state 45
    /               shift and go to state 56

  ! *               [ reduce using rule 22 (expression -> expression - expression .) ]
  ! /               [ reduce using rule 22 (expression -> expression - expression .) ]
  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 44 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]
  ! LEFTSHIFT       [ shift and go to state 43 ]
  ! RIGHTSHIFT      [ shift and go to state 48 ]


state 66

    (23) expression -> expression * expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    +               reduce using rule 23 (expression -> expression * expression .)
    -               reduce using rule 23 (expression -> expression * expression .)
    *               reduce using rule 23 (expression -> expression * expression .)
    /               reduce using rule 23 (expression -> expression * expression .)
    <               reduce using rule 23 (expression -> expression * expression .)
    >               reduce using rule 23 (expression -> expression * expression .)
    &               reduce using rule 23 (expression -> expression * expression .)
    |               reduce using rule 23 (expression -> expression * expression .)
    EQUAL           reduce using rule 23 (expression -> expression * expression .)
    NOTEQUAL        reduce using rule 23 (expression -> expression * expression .)
    GREATEREQUAL    reduce using rule 23 (expression -> expression * expression .)
    LESSEQUAL       reduce using rule 23 (expression -> expression * expression .)
    LEFTSHIFT       reduce using rule 23 (expression -> expression * expression .)
    RIGHTSHIFT      reduce using rule 23 (expression -> expression * expression .)
    ;               reduce using rule 23 (expression -> expression * expression .)
    )               reduce using rule 23 (expression -> expression * expression .)

  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 56 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]
  ! LEFTSHIFT       [ shift and go to state 43 ]
  ! RIGHTSHIFT      [ shift and go to state 48 ]


state 67

    (28) expression -> expression | expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    |               reduce using rule 28 (expression -> expression | expression .)
    ;               reduce using rule 28 (expression -> expression | expression .)
    )               reduce using rule 28 (expression -> expression | expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    <               shift and go to state 51
    >               shift and go to state 50
    &               shift and go to state 47
    EQUAL           shift and go to state 49
    NOTEQUAL        shift and go to state 54
    GREATEREQUAL    shift and go to state 57
    LESSEQUAL       shift and go to state 55
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48

  ! +               [ reduce using rule 28 (expression -> expression | expression .) ]
  ! -               [ reduce using rule 28 (expression -> expression | expression .) ]
  ! *               [ reduce using rule 28 (expression -> expression | expression .) ]
  ! /               [ reduce using rule 28 (expression -> expression | expression .) ]
  ! <               [ reduce using rule 28 (expression -> expression | expression .) ]
  ! >               [ reduce using rule 28 (expression -> expression | expression .) ]
  ! &               [ reduce using rule 28 (expression -> expression | expression .) ]
  ! EQUAL           [ reduce using rule 28 (expression -> expression | expression .) ]
  ! NOTEQUAL        [ reduce using rule 28 (expression -> expression | expression .) ]
  ! GREATEREQUAL    [ reduce using rule 28 (expression -> expression | expression .) ]
  ! LESSEQUAL       [ reduce using rule 28 (expression -> expression | expression .) ]
  ! LEFTSHIFT       [ reduce using rule 28 (expression -> expression | expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 28 (expression -> expression | expression .) ]
  ! |               [ shift and go to state 46 ]


state 68

    (27) expression -> expression & expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    &               reduce using rule 27 (expression -> expression & expression .)
    |               reduce using rule 27 (expression -> expression & expression .)
    ;               reduce using rule 27 (expression -> expression & expression .)
    )               reduce using rule 27 (expression -> expression & expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    <               shift and go to state 51
    >               shift and go to state 50
    EQUAL           shift and go to state 49
    NOTEQUAL        shift and go to state 54
    GREATEREQUAL    shift and go to state 57
    LESSEQUAL       shift and go to state 55
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48

  ! +               [ reduce using rule 27 (expression -> expression & expression .) ]
  ! -               [ reduce using rule 27 (expression -> expression & expression .) ]
  ! *               [ reduce using rule 27 (expression -> expression & expression .) ]
  ! /               [ reduce using rule 27 (expression -> expression & expression .) ]
  ! <               [ reduce using rule 27 (expression -> expression & expression .) ]
  ! >               [ reduce using rule 27 (expression -> expression & expression .) ]
  ! EQUAL           [ reduce using rule 27 (expression -> expression & expression .) ]
  ! NOTEQUAL        [ reduce using rule 27 (expression -> expression & expression .) ]
  ! GREATEREQUAL    [ reduce using rule 27 (expression -> expression & expression .) ]
  ! LESSEQUAL       [ reduce using rule 27 (expression -> expression & expression .) ]
  ! LEFTSHIFT       [ reduce using rule 27 (expression -> expression & expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 27 (expression -> expression & expression .) ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]


state 69

    (34) expression -> expression RIGHTSHIFT expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    >               reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    &               reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    |               reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    EQUAL           reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    NOTEQUAL        reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    GREATEREQUAL    reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    LESSEQUAL       reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    LEFTSHIFT       reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    RIGHTSHIFT      reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    ;               reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    )               reduce using rule 34 (expression -> expression RIGHTSHIFT expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56

  ! +               [ reduce using rule 34 (expression -> expression RIGHTSHIFT expression .) ]
  ! -               [ reduce using rule 34 (expression -> expression RIGHTSHIFT expression .) ]
  ! *               [ reduce using rule 34 (expression -> expression RIGHTSHIFT expression .) ]
  ! /               [ reduce using rule 34 (expression -> expression RIGHTSHIFT expression .) ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]
  ! LEFTSHIFT       [ shift and go to state 43 ]
  ! RIGHTSHIFT      [ shift and go to state 48 ]


state 70

    (29) expression -> expression EQUAL expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 29 (expression -> expression EQUAL expression .)
    >               reduce using rule 29 (expression -> expression EQUAL expression .)
    &               reduce using rule 29 (expression -> expression EQUAL expression .)
    |               reduce using rule 29 (expression -> expression EQUAL expression .)
    EQUAL           reduce using rule 29 (expression -> expression EQUAL expression .)
    NOTEQUAL        reduce using rule 29 (expression -> expression EQUAL expression .)
    GREATEREQUAL    reduce using rule 29 (expression -> expression EQUAL expression .)
    LESSEQUAL       reduce using rule 29 (expression -> expression EQUAL expression .)
    ;               reduce using rule 29 (expression -> expression EQUAL expression .)
    )               reduce using rule 29 (expression -> expression EQUAL expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48

  ! +               [ reduce using rule 29 (expression -> expression EQUAL expression .) ]
  ! -               [ reduce using rule 29 (expression -> expression EQUAL expression .) ]
  ! *               [ reduce using rule 29 (expression -> expression EQUAL expression .) ]
  ! /               [ reduce using rule 29 (expression -> expression EQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 29 (expression -> expression EQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 29 (expression -> expression EQUAL expression .) ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]


state 71

    (26) expression -> expression > expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 26 (expression -> expression > expression .)
    >               reduce using rule 26 (expression -> expression > expression .)
    &               reduce using rule 26 (expression -> expression > expression .)
    |               reduce using rule 26 (expression -> expression > expression .)
    EQUAL           reduce using rule 26 (expression -> expression > expression .)
    NOTEQUAL        reduce using rule 26 (expression -> expression > expression .)
    GREATEREQUAL    reduce using rule 26 (expression -> expression > expression .)
    LESSEQUAL       reduce using rule 26 (expression -> expression > expression .)
    ;               reduce using rule 26 (expression -> expression > expression .)
    )               reduce using rule 26 (expression -> expression > expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48

  ! +               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! -               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! *               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! /               [ reduce using rule 26 (expression -> expression > expression .) ]
  ! LEFTSHIFT       [ reduce using rule 26 (expression -> expression > expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 26 (expression -> expression > expression .) ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]


state 72

    (25) expression -> expression < expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 25 (expression -> expression < expression .)
    >               reduce using rule 25 (expression -> expression < expression .)
    &               reduce using rule 25 (expression -> expression < expression .)
    |               reduce using rule 25 (expression -> expression < expression .)
    EQUAL           reduce using rule 25 (expression -> expression < expression .)
    NOTEQUAL        reduce using rule 25 (expression -> expression < expression .)
    GREATEREQUAL    reduce using rule 25 (expression -> expression < expression .)
    LESSEQUAL       reduce using rule 25 (expression -> expression < expression .)
    ;               reduce using rule 25 (expression -> expression < expression .)
    )               reduce using rule 25 (expression -> expression < expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48

  ! +               [ reduce using rule 25 (expression -> expression < expression .) ]
  ! -               [ reduce using rule 25 (expression -> expression < expression .) ]
  ! *               [ reduce using rule 25 (expression -> expression < expression .) ]
  ! /               [ reduce using rule 25 (expression -> expression < expression .) ]
  ! LEFTSHIFT       [ reduce using rule 25 (expression -> expression < expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 25 (expression -> expression < expression .) ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]


state 73

    (21) expression -> expression + expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    +               reduce using rule 21 (expression -> expression + expression .)
    -               reduce using rule 21 (expression -> expression + expression .)
    <               reduce using rule 21 (expression -> expression + expression .)
    >               reduce using rule 21 (expression -> expression + expression .)
    &               reduce using rule 21 (expression -> expression + expression .)
    |               reduce using rule 21 (expression -> expression + expression .)
    EQUAL           reduce using rule 21 (expression -> expression + expression .)
    NOTEQUAL        reduce using rule 21 (expression -> expression + expression .)
    GREATEREQUAL    reduce using rule 21 (expression -> expression + expression .)
    LESSEQUAL       reduce using rule 21 (expression -> expression + expression .)
    LEFTSHIFT       reduce using rule 21 (expression -> expression + expression .)
    RIGHTSHIFT      reduce using rule 21 (expression -> expression + expression .)
    ;               reduce using rule 21 (expression -> expression + expression .)
    )               reduce using rule 21 (expression -> expression + expression .)
    *               shift and go to state 45
    /               shift and go to state 56

  ! *               [ reduce using rule 21 (expression -> expression + expression .) ]
  ! /               [ reduce using rule 21 (expression -> expression + expression .) ]
  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 44 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]
  ! LEFTSHIFT       [ shift and go to state 43 ]
  ! RIGHTSHIFT      [ shift and go to state 48 ]


state 74

    (30) expression -> expression NOTEQUAL expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    >               reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    &               reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    |               reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    EQUAL           reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    NOTEQUAL        reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    GREATEREQUAL    reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    LESSEQUAL       reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    ;               reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    )               reduce using rule 30 (expression -> expression NOTEQUAL expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48

  ! +               [ reduce using rule 30 (expression -> expression NOTEQUAL expression .) ]
  ! -               [ reduce using rule 30 (expression -> expression NOTEQUAL expression .) ]
  ! *               [ reduce using rule 30 (expression -> expression NOTEQUAL expression .) ]
  ! /               [ reduce using rule 30 (expression -> expression NOTEQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 30 (expression -> expression NOTEQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 30 (expression -> expression NOTEQUAL expression .) ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]


state 75

    (32) expression -> expression LESSEQUAL expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    >               reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    &               reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    |               reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    EQUAL           reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    NOTEQUAL        reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    GREATEREQUAL    reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    LESSEQUAL       reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    ;               reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    )               reduce using rule 32 (expression -> expression LESSEQUAL expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48

  ! +               [ reduce using rule 32 (expression -> expression LESSEQUAL expression .) ]
  ! -               [ reduce using rule 32 (expression -> expression LESSEQUAL expression .) ]
  ! *               [ reduce using rule 32 (expression -> expression LESSEQUAL expression .) ]
  ! /               [ reduce using rule 32 (expression -> expression LESSEQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 32 (expression -> expression LESSEQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 32 (expression -> expression LESSEQUAL expression .) ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]


state 76

    (24) expression -> expression / expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    +               reduce using rule 24 (expression -> expression / expression .)
    -               reduce using rule 24 (expression -> expression / expression .)
    *               reduce using rule 24 (expression -> expression / expression .)
    /               reduce using rule 24 (expression -> expression / expression .)
    <               reduce using rule 24 (expression -> expression / expression .)
    >               reduce using rule 24 (expression -> expression / expression .)
    &               reduce using rule 24 (expression -> expression / expression .)
    |               reduce using rule 24 (expression -> expression / expression .)
    EQUAL           reduce using rule 24 (expression -> expression / expression .)
    NOTEQUAL        reduce using rule 24 (expression -> expression / expression .)
    GREATEREQUAL    reduce using rule 24 (expression -> expression / expression .)
    LESSEQUAL       reduce using rule 24 (expression -> expression / expression .)
    LEFTSHIFT       reduce using rule 24 (expression -> expression / expression .)
    RIGHTSHIFT      reduce using rule 24 (expression -> expression / expression .)
    ;               reduce using rule 24 (expression -> expression / expression .)
    )               reduce using rule 24 (expression -> expression / expression .)

  ! +               [ shift and go to state 53 ]
  ! -               [ shift and go to state 44 ]
  ! *               [ shift and go to state 45 ]
  ! /               [ shift and go to state 56 ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]
  ! LEFTSHIFT       [ shift and go to state 43 ]
  ! RIGHTSHIFT      [ shift and go to state 48 ]


state 77

    (31) expression -> expression GREATEREQUAL expression .
    (21) expression -> expression . + expression
    (22) expression -> expression . - expression
    (23) expression -> expression . * expression
    (24) expression -> expression . / expression
    (25) expression -> expression . < expression
    (26) expression -> expression . > expression
    (27) expression -> expression . & expression
    (28) expression -> expression . | expression
    (29) expression -> expression . EQUAL expression
    (30) expression -> expression . NOTEQUAL expression
    (31) expression -> expression . GREATEREQUAL expression
    (32) expression -> expression . LESSEQUAL expression
    (33) expression -> expression . LEFTSHIFT expression
    (34) expression -> expression . RIGHTSHIFT expression

    <               reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    >               reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    &               reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    |               reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    EQUAL           reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    NOTEQUAL        reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    GREATEREQUAL    reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    LESSEQUAL       reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    ;               reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    )               reduce using rule 31 (expression -> expression GREATEREQUAL expression .)
    +               shift and go to state 53
    -               shift and go to state 44
    *               shift and go to state 45
    /               shift and go to state 56
    LEFTSHIFT       shift and go to state 43
    RIGHTSHIFT      shift and go to state 48

  ! +               [ reduce using rule 31 (expression -> expression GREATEREQUAL expression .) ]
  ! -               [ reduce using rule 31 (expression -> expression GREATEREQUAL expression .) ]
  ! *               [ reduce using rule 31 (expression -> expression GREATEREQUAL expression .) ]
  ! /               [ reduce using rule 31 (expression -> expression GREATEREQUAL expression .) ]
  ! LEFTSHIFT       [ reduce using rule 31 (expression -> expression GREATEREQUAL expression .) ]
  ! RIGHTSHIFT      [ reduce using rule 31 (expression -> expression GREATEREQUAL expression .) ]
  ! <               [ shift and go to state 51 ]
  ! >               [ shift and go to state 50 ]
  ! &               [ shift and go to state 47 ]
  ! |               [ shift and go to state 46 ]
  ! EQUAL           [ shift and go to state 49 ]
  ! NOTEQUAL        [ shift and go to state 54 ]
  ! GREATEREQUAL    [ shift and go to state 57 ]
  ! LESSEQUAL       [ shift and go to state 55 ]


state 78

    (15) statement -> IF ( expression ) block .

    }               reduce using rule 15 (statement -> IF ( expression ) block .)
    IF              reduce using rule 15 (statement -> IF ( expression ) block .)
    WHILE           reduce using rule 15 (statement -> IF ( expression ) block .)
    RETURN          reduce using rule 15 (statement -> IF ( expression ) block .)
    IDENT           reduce using rule 15 (statement -> IF ( expression ) block .)


state 79

    (16) statement -> WHILE ( expression ) block .

    }               reduce using rule 16 (statement -> WHILE ( expression ) block .)
    IF              reduce using rule 16 (statement -> WHILE ( expression ) block .)
    WHILE           reduce using rule 16 (statement -> WHILE ( expression ) block .)
    RETURN          reduce using rule 16 (statement -> WHILE ( expression ) block .)
    IDENT           reduce using rule 16 (statement -> WHILE ( expression ) block .)


state 80

    (38) func_args -> func_arg .

    )               reduce using rule 38 (func_args -> func_arg .)
    ,               reduce using rule 38 (func_args -> func_arg .)


state 81

    (36) function_call -> ident ( func_args . )
    (39) func_args -> func_args . , func_arg

    )               shift and go to state 83
    ,               shift and go to state 84


state 82

    (40) func_arg -> ident . = ident

    =               shift and go to state 85


state 83

    (36) function_call -> ident ( func_args ) .

    ;               reduce using rule 36 (function_call -> ident ( func_args ) .)


state 84

    (39) func_args -> func_args , . func_arg
    (40) func_arg -> . ident = ident
    (4) ident -> . IDENT

    IDENT           shift and go to state 5

    ident                          shift and go to state 82
    func_arg                       shift and go to state 86

state 85

    (40) func_arg -> ident = . ident
    (4) ident -> . IDENT

    IDENT           shift and go to state 5

    ident                          shift and go to state 87

state 86

    (39) func_args -> func_args , func_arg .

    )               reduce using rule 39 (func_args -> func_args , func_arg .)
    ,               reduce using rule 39 (func_args -> func_args , func_arg .)


state 87

    (40) func_arg -> ident = ident .

    )               reduce using rule 40 (func_arg -> ident = ident .)
    ,               reduce using rule 40 (func_arg -> ident = ident .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for IF in state 15 resolved as shift
WARNING: shift/reduce conflict for WHILE in state 15 resolved as shift
WARNING: shift/reduce conflict for RETURN in state 15 resolved as shift
WARNING: shift/reduce conflict for IDENT in state 15 resolved as shift
